import{_ as n,c as a,o as s,a as t}from"./app.9b0c39a4.js";const g='{"title":"Talonando Componentes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Talonando Componentes","slug":"talonando-componentes"},{"level":2,"title":"Creando los componentes","slug":"creando-los-componentes"},{"level":2,"title":"Escribir una prueba usando mount","slug":"escribir-una-prueba-usando-mount"},{"level":2,"title":"Uso de stubs para talonar <ComponentWithAsyncCall>","slug":"uso-de-stubs-para-talonar-componentwithasynccall"},{"level":2,"title":"Talonado autom\xE1tico con shallowMount","slug":"talonado-automatico-con-shallowmount"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vth/talonando-componentes.md"}',o={},e=t(`<h2 id="talonando-componentes" tabindex="-1">Talonando Componentes <a class="header-anchor" href="#talonando-componentes" aria-hidden="true">#</a></h2><p>Puede encontrar la prueba descrita en esta p\xE1gina <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/ParentWithAPICallChild.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><p>\xBFPor qu\xE9 tal\xF3n?</p><p>Al escribir pruebas unitarias, a menudo queremos talonar partes del c\xF3digo que no nos interesan. Un tal\xF3n es simplemente una pieza de c\xF3digo que reemplaza a otra. Supongamos que est\xE1 escribiendo una prueba para un componente <code>&lt;UserContainer&gt;</code>. Se parece a esto:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserContainer</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UsersDisplay</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserContainer</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>&lt;UsersDisplay&gt;</code> tiene un m\xE9todo de ciclo de vida creado como este:</p><div class="language-js"><pre><code><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Queremos escribir una prueba que afirme que se renderiza <code>&lt;UsersDisplay&gt;</code>.</p><p><code>axios</code> est\xE1 realizando una solicitud ajax a un servicio externo en el gancho <code>created</code>. Eso significa que cuando hace <code>mount(UserContainer)</code>, <code>&lt;UsersDisplay&gt;</code> tambi\xE9n se monta y <code>created</code> inicia una solicitud ajax. Dado que se trata de una prueba unitaria, solo nos interesa si <code>&lt;UserContainer&gt;</code> renderiza correctamente <code>&lt;UsersDisplay&gt;</code> - verificar que la solicitud ajax se active con el punto final correcto, etc., es responsabilidad de <code>&lt;UsersDisplay&gt;</code>, que debe probarse en archivo de prueba de <code>&lt;UsersDisplay&gt;</code>.</p><p>Una forma de evitar que <code>&lt;UsersDisplay&gt;</code> inicie la solicitud ajax es <em>talonar</em> el componente. Escribamos nuestros propios componentes y pruebas, para obtener una mejor comprensi\xF3n de las diferentes formas y beneficios de usar talones.</p><h2 id="creando-los-componentes" tabindex="-1">Creando los componentes <a class="header-anchor" href="#creando-los-componentes" aria-hidden="true">#</a></h2><p>Este ejemplo utilizar\xE1 dos componentes. El primero es <code>ParentWithAPICallChild</code>, que simplemente renderiza otro componente:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentWithAsyncCall</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentWithAsyncCall <span class="token keyword">from</span> <span class="token string">&quot;./ComponentWithAsyncCall.vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ParentWithAPICallChild&quot;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ComponentWithAsyncCall
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>&lt;ParentWithAPICallChild&gt;</code> es un componente simple. Su \xFAnica responsabilidad es representar <code>&lt;ComponentWithAsyncCall&gt;</code>. <code>&lt;ComponentWithAsyncCall&gt;</code>, como sugiere el nombre, realiza una llamada ajax utilizando el cliente http <code>axios</code>:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ComponentWithAsyncCall&quot;</span><span class="token punctuation">,</span>
  
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeApiCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">makeApiCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Making api call&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>&lt;ComponentWithAsyncCall&gt;</code> llama a <code>makeApiCall</code> en el gancho del ciclo de vida <code>created</code>.</p><h2 id="escribir-una-prueba-usando-mount" tabindex="-1">Escribir una prueba usando <code>mount</code> <a class="header-anchor" href="#escribir-una-prueba-usando-mount" aria-hidden="true">#</a></h2><p>Comencemos escribiendo una prueba para verificar que <code>&lt;ComponentWithAsyncCall&gt;</code> se renderice. Tenga en cuenta que se utiliza <code>findComponent</code>. <code>find</code> se usa para consultar elementos DOM y usa la sintaxis <code>querySelector</code>. <code>findComponent</code> se usa cuando se busca un componente espec\xEDfico, toma un componente como argumento.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> ParentWithAPICallChild <span class="token keyword">from</span> <span class="token string">&#39;@/components/ParentWithAPICallChild.vue&#39;</span>
<span class="token keyword">import</span> ComponentWithAsyncCall <span class="token keyword">from</span> <span class="token string">&#39;@/components/ComponentWithAsyncCall.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;ParentWithAPICallChild.vue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders with mount and does initialize API call&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ParentWithAPICallChild<span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findComponent</span><span class="token punctuation">(</span>ComponentWithAsyncCall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ejecuci\xF3n de prueba:</p><div class="language-"><pre><code>PASS  tests/unit/ParentWithAPICallChild.spec.js

console.log src/components/ComponentWithAsyncCall.vue:17
  Making api call
</code></pre></div><p>La prueba est\xE1 pasando, \xA1genial! Sin embargo, podemos hacerlo mejor. Observe el <code>console.log</code> en la salida de prueba - esto proviene del m\xE9todo <code>makeApiCall</code>. Idealmente, no queremos hacer llamadas a servicios externos en nuestras pruebas unitarias, especialmente cuando se trata de un componente que no es el enfoque principal de la prueba actual. Podemos usar la opci\xF3n de montaje de <code>stubs</code>, descrita en los documentos de <code>vue-test-utils</code> <a href="https://test-utils.vuejs.org/migration/#mocks-and-stubs-are-now-in-global" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><h2 id="uso-de-stubs-para-talonar-componentwithasynccall" tabindex="-1">Uso de <code>stubs</code> para talonar <code>&lt;ComponentWithAsyncCall&gt;</code> <a class="header-anchor" href="#uso-de-stubs-para-talonar-componentwithasynccall" aria-hidden="true">#</a></h2><p>Actualicemos la prueba, esta vez agregando <code>&lt;ComponentWithAsyncCall&gt;</code>:</p><div class="language-js"><pre><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders with mount and does initialize API call&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ParentWithAPICallChild<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">stubs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">ComponentWithAsyncCall</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findComponent</span><span class="token punctuation">(</span>ComponentWithAsyncCall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>La prueba a\xFAn pasa cuando se ejecuta, sin embargo, el <code>console.log</code> no se ve por ninguna parte. Esto se debe a que pasar <code>[component]: true</code> a <code>stubs</code> reemplaz\xF3 el componente original con un <em>stub</em>. La interfaz externa sigue siendo la misma (todav\xEDa podemos seleccionarla usando <code>find</code>, ya que la propiedad de nombre, que <code>find</code> usa internamente, sigue siendo la misma). Los m\xE9todos internos, como <code>makeApiCall</code>, se reemplazan por m\xE9todos ficticios que no hacen nada: son &quot;talonados&quot;.</p><p>Tambi\xE9n puede especificar el marcado que se usar\xE1 para el tal\xF3n, si lo desea:</p><div class="language-js"><pre><code><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ParentWithAPICallChild<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">stubs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ComponentWithAsyncCall</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div class=&#39;stub&#39;&gt;&lt;/div&gt;&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="talonado-automatico-con-shallowmount" tabindex="-1">Talonado autom\xE1tico con <code>shallowMount</code> <a class="header-anchor" href="#talonado-automatico-con-shallowmount" aria-hidden="true">#</a></h2><p>En lugar de usar <code>mount</code> y manualmente talonar <code>&lt;ComponentWithAsyncCall&gt;</code>, simplemente podemos usar <code>shallowMount</code>, que autom\xE1ticamente crea talones para cualquier otro componente de forma predeterminada. La prueba con <code>shallowMount</code> se ve as\xED:</p><div class="language-js"><div class="highlight-lines"><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> shallowMount<span class="token punctuation">,</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ParentWithAPICallChild <span class="token keyword">from</span> <span class="token string">&#39;@/components/ParentWithAPICallChild.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ComponentWithAsyncCall <span class="token keyword">from</span> <span class="token string">&#39;@/components/ComponentWithAsyncCall.vue&#39;</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;ParentWithAPICallChild.vue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders with mount and does initialize API call&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ParentWithAPICallChild<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">stubs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">ComponentWithAsyncCall</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token comment">//ComponentWithAsyncCall: &quot;&lt;div class=&#39;stub&#39;&gt;&lt;/div&gt;&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findComponent</span><span class="token punctuation">(</span>ComponentWithAsyncCall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders with shallowMount and does not initialize API call&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallowMount</span><span class="token punctuation">(</span>ParentWithAPICallChild<span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findComponent</span><span class="token punctuation">(</span>ComponentWithAsyncCall<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Al ejecutar la prueba no muestra ning\xFAn <code>console.log</code> y la prueba pasa. <code>superficialMount</code> autom\xE1ticamente talona <code>&lt;ComponentWithAsyncCall&gt;</code>. <code>superficialMount</code> es \xFAtil para probar componentes que tienen muchos componentes secundarios, que pueden tener un comportamiento desencadenado en enlaces de ciclo de vida, como <code>created</code> o <code>mounted</code>, etc. Tiendo a usar <code>mount</code> de forma predeterminada, a menos que tenga una buena raz\xF3n para usar <code>superficialMount</code>. Depende de su caso de uso y de lo que est\xE9 probando. Intente hacer lo que sea m\xE1s parecido a c\xF3mo se utilizar\xE1n sus componentes en la producci\xF3n.</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><ul><li><code>stubs</code> es \xFAtil para talonar el comportamiento de los componentes secundarios que no est\xE1 relacionados con la prueba unitaria actual</li><li><code>superficialMount</code> talona los componentes secundarios de forma predeterminada.</li><li>Puede pasar <code>true</code> para crear un tal\xF3n predeterminado o pasar su propia implementaci\xF3n personalizada</li></ul><p>Puede encontrar la prueba descrita en esta p\xE1gina <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/ParentWithAPICallChild.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p>`,35),p=[e];function c(l,u,i,r,d,k){return s(),a("div",null,p)}var h=n(o,[["render",c]]);export{g as __pageData,h as default};
