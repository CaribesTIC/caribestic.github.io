import{_ as n,c as a,o as s,a as e}from"./app.8171c9f3.js";const m='{"title":"Entorno de prueba","description":"","frontmatter":{},"headers":[{"level":2,"title":"Instalar Vue Tests Utils","slug":"instalar-vue-tests-utils"},{"level":2,"title":"Escribamos la primera prueba","slug":"escribamos-la-primera-prueba"},{"level":2,"title":"Escribir la Prueba","slug":"escribir-la-prueba"},{"level":2,"title":"Ejecutando la prueba","slug":"ejecutando-la-prueba"},{"level":2,"title":"Hacer afirmaciones","slug":"hacer-afirmaciones"},{"level":2,"title":"Uso de Vue 3 y la Composition API","slug":"uso-de-vue-3-y-la-composition-api"},{"level":2,"title":"Script Setup","slug":"script-setup"},{"level":2,"title":"\xBFQu\xE9 Sigue?","slug":"\xBFque-sigue"}],"relativePath":"vtu/esencial/entorno-de-prueba.md"}',t={},p=e(`<h1 id="entorno-de-prueba" tabindex="-1">Entorno de prueba <a class="header-anchor" href="#entorno-de-prueba" aria-hidden="true">#</a></h1><h2 id="instalar-vue-tests-utils" tabindex="-1">Instalar Vue Tests Utils <a class="header-anchor" href="#instalar-vue-tests-utils" aria-hidden="true">#</a></h2><p>Una vez creado el proyecto con <a href="./../../vitest/entorno-de-prueba.html#crear-proyecto-con-vite">Vite</a> y haber instalado <a href="./../../vitest/entorno-de-prueba.html#instalar-vitest">Vitest</a> hay que ejecutar la siguiente l\xEDnea de comando para as\xED instalar <a href="https://test-utils.vuejs.org/installation/" target="_blank" rel="noopener noreferrer">Vue Tests Utils</a></p><div class="language-"><pre><code>npm i -D @vue/test-utils@next
</code></pre></div><p>As\xED de f\xE1cil, ahora, Escribamos la primera prueba a un componente Vue.</p><h2 id="escribamos-la-primera-prueba" tabindex="-1">Escribamos la primera prueba <a class="header-anchor" href="#escribamos-la-primera-prueba" aria-hidden="true">#</a></h2><p>Ensuci\xE9monos las manos, escribiendo nuestro propio componente y una prueba. Tradicionalmente, al hacer TDD, primero escribe la prueba fallida y luego implementa el c\xF3digo que permite que pase la prueba. Por ahora, escribiremos primero el componente.</p><p>Creando el componente Greeting</p><p>Cree un archivo <code>Greeting.vue</code> en <code>src/components</code>. Dentro de <code>Greeting.vue</code>, agregue lo siguiente:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ greeting }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Greeting&quot;</span><span class="token punctuation">,</span>

  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">&quot;Vue and TDD&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="escribir-la-prueba" tabindex="-1">Escribir la Prueba <a class="header-anchor" href="#escribir-la-prueba" aria-hidden="true">#</a></h2><p><code>Greeting</code> tiene una sola responsabilidad: representar el valor de <code>greeting</code>. La estrategia ser\xE1:</p><ol><li>Renderizar el componente con <code>mount</code></li><li>Afirmar que el texto del componente contiene &quot;Vue y TDD&quot;</li></ol><p>Cree un <code>Greeting.spec.js</code> dentro de <code>tests/unit</code>. En el interior, importe <code>Greeting.vue</code>, as\xED como <code>mount</code>, y agregue el trazado de la prueba:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> Greeting <span class="token keyword">from</span> <span class="token string">&#39;@/components/Greeting.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Greeting.vue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders a greeting&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Hay diferentes sintaxis usadas para TDD, usaremos la sintaxis de <code>describe</code> e <code>it</code> com\xFAnmente que viene con Vitest. <code>describe</code> generalmente describe de qu\xE9 se trata la prueba, en este caso <code>Greeting.vue</code>. Representa una sola responsabilidad que debe cumplir el sujeto de la prueba. A medida que agregamos m\xE1s funciones al componente, agregamos m\xE1s bloques <code>it</code>.</p><p>Ahora deber\xEDamos renderizar el componente con <code>mount</code>. La pr\xE1ctica est\xE1ndar es asignar el componente a una variable llamada <code>wrapper</code>. Tambi\xE9n imprimiremos la salida, para asegurarnos de que todo funciona correctamente:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> Greeting <span class="token keyword">from</span> <span class="token string">&#39;@/components/Greeting.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Greeting.vue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders a greeting&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Greeting<span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="ejecutando-la-prueba" tabindex="-1">Ejecutando la prueba <a class="header-anchor" href="#ejecutando-la-prueba" aria-hidden="true">#</a></h2><p>Ejecute la prueba escribiendo <code>npm run test</code> en su terminal. Cualquier archivo en el directorio de pruebas que termine con <code>.spec.js</code> o <code>.test.js</code> se ejecuta autom\xE1ticamente. Si todo ha ido bien, deber\xEDas ver:</p><div class="language-"><pre><code>&lt;div&gt;Vue and TDD&lt;/div&gt;

 \u221A tests/unit/Greeting.spec.js (1)

Test Files  1 passed (1)
     Tests  1 passed (1)
      Time  6.28s (in thread 16ms, 39195.30%)
</code></pre></div><p>Podemos ver que el marcado es correcto y la prueba pasa. La prueba pasa porque no hubo fallas; esta prueba nunca puede fallar, por lo que a\xFAn no es muy \xFAtil. Incluso si cambiamos <code>Greeting.vue</code> y eliminamos <code>greeting</code> de la plantilla, seguir\xE1 pasando. Cambiemos eso.</p><h2 id="hacer-afirmaciones" tabindex="-1">Hacer afirmaciones <a class="header-anchor" href="#hacer-afirmaciones" aria-hidden="true">#</a></h2><p>Necesitamos hacer una afirmaci\xF3n para asegurarnos de que el componente se comporta correctamente. Podemos hacer eso usando <code>expect</code> de la API de Vitest. Tiene este aspecto: <code>expect(result).to [matcher] (actual)</code>.</p><p><a href="./../../vitest/usando-comparadores.html">Los comparadores</a> son m\xE9todos para comparar valores y objetos. Por ejemplo:</p><div class="language-js"><pre><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div><p>Una lista completa de comparadores est\xE1 disponible en la <a href="https://vitest.dev/api/#expect" target="_blank" rel="noopener noreferrer">documentaci\xF3n de Vitest</a>. <code>vue-test-utils</code> no incluye ning\xFAn comparador - los que proporciona Vitest son m\xE1s que suficientes. Queremos comparar el texto de <code>Greeting</code>. Podr\xEDamos escribir:</p><div class="language-js"><pre><code><span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;Vue and TDD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre></div><p>Pero <code>vue-test-utils</code> tiene una forma a\xFAn mejor de obtener el marcado: <code>wrapper.text</code>. Terminemos la prueba:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> Greeting <span class="token keyword">from</span> <span class="token string">&#39;@/components/Greeting.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Greeting.vue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders a greeting&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Greeting<span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">&quot;Vue and TDD&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ya no necesitamos el ning\xFAn <code>console.log</code>, por lo que puede eliminarlo. Ejecute las pruebas con <code>npm run test</code>, y si todo sali\xF3 bien, deber\xEDa obtener:</p><div class="language-"><pre><code> \u221A tests/unit/Greeting.spec.js (1)

Test Files  1 passed (1)
     Tests  1 passed (1)
      Time  12ms
</code></pre></div><p>Luciendo bien. Pero siempre debe ver que una prueba falla y luego pasa, para asegurarse de que realmente funciona. En TDD tradicional, escribir\xEDa la prueba antes de la implementaci\xF3n real, ver\xEDa que falla y luego usar\xEDa los errores fallidos para guiar su c\xF3digo. Asegur\xE9monos de que esta prueba realmente funcione. Actualizar <code>Greeting.vue</code>:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ greeting }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Greeting&quot;</span><span class="token punctuation">,</span>

  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">&quot;Vue without TDD&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Y ahora ejecuta la prueba con <code>npm run test</code>:</p><div class="language-"><pre><code>FAIL  tests/unit/Greeting.spec.js &gt; Greeting.vue &gt; renders a greeting
AssertionError: expected &#39;Vue without TDD&#39; to include &#39;Vue and TDD&#39;
 \u276F tests/test.test.js:9:28
      7|     const wrapper = mount(Greeting)
      8|     
      9|     expect(wrapper.text()).toMatch(&quot;Vue and TDD&quot;)
       |                            ^
     10|   })
     11| })

\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF[1/1]\u23AF

Test Files  1 failed (1)
     Tests  1 failed (1)
      Time  14ms
</code></pre></div><p>Vitest nos da buenos comentarios. Podemos ver el resultado esperado y el real, as\xED como en qu\xE9 l\xEDnea fall\xF3 la expectativa. La prueba fall\xF3, como se esperaba. Revierta <code>Greeting.vue</code> y aseg\xFArese de que la prueba vuelva a pasar.</p><h2 id="uso-de-vue-3-y-la-composition-api" tabindex="-1">Uso de Vue 3 y la <em>Composition API</em> <a class="header-anchor" href="#uso-de-vue-3-y-la-composition-api" aria-hidden="true">#</a></h2><p>Vue 3 agrega otra API para crear componentes: la <em>Composition API</em>. Una se\xF1al de una buena prueba es que evitamos probar los detalles de implementaci\xF3n (c\xF3mo funciona el c\xF3digo), sino que nos enfocamos en el comportamiento (lo que hace el c\xF3digo). Refactoricemos el componente anterior y veamos qu\xE9 sucede. Si la prueba a\xFAn pasa, sabemos que est\xE1 probando las cosas correctas. Si falla, podr\xEDamos estar probando un detalle de implementaci\xF3n.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ greeting }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Greeting&#39;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token string">&#39;Vue and TDD&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      greeting<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Al comenzar con la <em>Composition API</em>, a menudo se olvida de agregar la variable a la devoluci\xF3n. Intente omitir esto y vea c\xF3mo falla la prueba. Si planea convertir algunos de los componentes de la <em>Options API</em> a la <em>Composition API</em>, algunas pruebas pueden brindarle confianza y proporcionar un ciclo de retroalimentaci\xF3n positiva durante la refactorizaci\xF3n.</p><h2 id="script-setup" tabindex="-1"><em>Script Setup</em> <a class="header-anchor" href="#script-setup" aria-hidden="true">#</a></h2><p>Agreguemos una refactorizaci\xF3n m\xE1s llevando <code>Greeting.vue</code> a <code>&lt;script setup&gt;</code>:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token string">&#39;Vue and TDD&#39;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ greeting }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="\xBFque-sigue" tabindex="-1">\xBFQu\xE9 Sigue? <a class="header-anchor" href="#\xBFque-sigue" aria-hidden="true">#</a></h2><p>Para ver Vue Test Utils en acci\xF3n, realice el Curso Acelerado, donde construimos una aplicaci\xF3n sencilla de Todo utilizando un enfoque de prueba primero.</p><p>Los documentos se dividen en dos secciones principales:</p><ul><li><strong>Esenciales</strong>, para cubrir los casos de uso comunes que enfrentar\xE1 al probar los componentes de Vue.</li><li><strong>Vue Test Utils en Profundidad</strong>, para explorar otras funciones avanzadas de la biblioteca.</li></ul><p>Tambi\xE9n puede explorar la <a href="https://test-utils.vuejs.org/api/" target="_blank" rel="noopener noreferrer">API</a> completa.</p><p>Alternativamente, si prefiere aprender a trav\xE9s de video, hay <a href="https://www.youtube.com/playlist?list=PLC2LZCNWKL9ahK1IoODqYxKu5aA9T5IOA" target="_blank" rel="noopener noreferrer">una serie de conferencias disponibles aqu\xED</a>.</p>`,50),o=[p];function c(i,l,r,u,d,k){return s(),a("div",null,o)}var b=n(t,[["render",c]]);export{m as __pageData,b as default};
