import{_ as n,c as a,o as s,a as e}from"./app.aa33dd96.js";const b='{"title":"Escribir componentes que sean f\xE1ciles de probar","description":"","frontmatter":{},"headers":[{"level":2,"title":"No probar los detalles de implementaci\xF3n","slug":"no-probar-los-detalles-de-implementacion"},{"level":2,"title":"Todo lo dem\xE1s son detalles de implementaci\xF3n.","slug":"todo-lo-demas-son-detalles-de-implementacion"},{"level":2,"title":"Construya componentes m\xE1s peque\xF1os y simples","slug":"construya-componentes-mas-pequenos-y-simples"},{"level":2,"title":"Extraer llamadas a la API","slug":"extraer-llamadas-a-la-api"},{"level":2,"title":"Extraer m\xE9todos complejos","slug":"extraer-metodos-complejos"},{"level":2,"title":"Escribir pruebas antes de escribir el componente.","slug":"escribir-pruebas-antes-de-escribir-el-componente"}],"relativePath":"vtu/esencial/escribir-componentes-que-sean faciles-de-probar.md"}',t={},o=e(`<h1 id="escribir-componentes-que-sean-faciles-de-probar" tabindex="-1">Escribir componentes que sean f\xE1ciles de probar <a class="header-anchor" href="#escribir-componentes-que-sean-faciles-de-probar" aria-hidden="true">#</a></h1><p>Vue Test Utils lo ayuda a escribir pruebas para los componentes de Vue. Sin embargo, no hay mucho que VTU pueda hacer.</p><p>A continuaci\xF3n se incluye una lista de sugerencias para escribir c\xF3digo que sea m\xE1s f\xE1cil de probar y para escribir pruebas que sean significativas y f\xE1ciles de mantener.</p><p>La siguiente lista proporciona una gu\xEDa general y puede ser \xFAtil en escenarios comunes.</p><h2 id="no-probar-los-detalles-de-implementacion" tabindex="-1">No probar los detalles de implementaci\xF3n <a class="header-anchor" href="#no-probar-los-detalles-de-implementacion" aria-hidden="true">#</a></h2><p>Piense en t\xE9rminos de entradas y salidas desde la perspectiva del usuario. Aproximadamente, esto es todo lo que debe tener en cuenta al escribir una prueba para un componente de Vue:</p><table><thead><tr><th>Entradas</th><th>Ejemplos</th></tr></thead><tbody><tr><td>Interacciones</td><td>Hacer click, escribir... cualquier interacci\xF3n &quot;humana&quot;</td></tr><tr><td>Props</td><td>Los argumentos que recibe un componente</td></tr><tr><td>Flujos de datos</td><td>Datos entrantes de llamadas API, suscripciones de datos...</td></tr></tbody></table><table><thead><tr><th>Salidas</th><th>Ejemplos</th></tr></thead><tbody><tr><td>Elementos DOM</td><td>Cualquier nodo observable representado en el documento</td></tr><tr><td>Eventos</td><td>Eventos emitidos (usando <code>$emit</code>)</td></tr><tr><td>Efectos secundarios</td><td>Como <code>console.log</code> o llamadas API</td></tr></tbody></table><h2 id="todo-lo-demas-son-detalles-de-implementacion" tabindex="-1">Todo lo dem\xE1s son detalles de implementaci\xF3n. <a class="header-anchor" href="#todo-lo-demas-son-detalles-de-implementacion" aria-hidden="true">#</a></h2><p>Observe c\xF3mo esta lista no incluye elementos como m\xE9todos internos, estados intermedios o incluso datos.</p><p>La regla general es que <strong>una prueba no debe fallar en un refactor</strong>, es decir, cuando cambiamos su implementaci\xF3n interna sin cambiar su comportamiento. Si eso sucede, la prueba podr\xEDa depender de los detalles de implementaci\xF3n.</p><p>Por ejemplo, supongamos un componente de contador b\xE1sico que presenta un bot\xF3n para incrementar un contador:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>paragraph<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Times clicked: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>increment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Podr\xEDamos escribir la siguiente prueba:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">&#39;@/Counter.vue&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;counter text updates&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>
  <span class="token keyword">const</span> paragraph <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.paragraph&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Times clicked: 0&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Times clicked: 2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Observe c\xF3mo aqu\xED estamos actualizando sus datos internos y tambi\xE9n confiamos en los detalles (desde la perspectiva del usuario) como las clases de CSS.</p><div class="tip custom-block"><p class="custom-block-title">CONSEJO</p><p>Tenga en cuenta que cambiar los datos o el nombre de la clase CSS har\xEDa que la prueba fallara. Sin embargo, el componente seguir\xEDa funcionando como se esperaba. Esto se conoce como <strong>falso positivo</strong>.</p></div><p>En cambio, la siguiente prueba intenta apegarse a las entradas y salidas enumeradas anteriormente:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">&#39;@/Counter.vue&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;text updates on clicking&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Times clicked: 0&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> button <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> button<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> button<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Times clicked: 2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Las bibliotecas como <a href="https://github.com/testing-library/vue-testing-library/" target="_blank" rel="noopener noreferrer">Vue Testing Library</a> se basan en estos principios. Si est\xE1 interesado en este enfoque, aseg\xFArese de comprobarlo.</p><h2 id="construya-componentes-mas-pequenos-y-simples" tabindex="-1">Construya componentes m\xE1s peque\xF1os y simples <a class="header-anchor" href="#construya-componentes-mas-pequenos-y-simples" aria-hidden="true">#</a></h2><p>Una regla general es que si un componente hace menos, ser\xE1 m\xE1s f\xE1cil probarlo.</p><p>Hacer componentes m\xE1s peque\xF1os los har\xE1 m\xE1s componibles y m\xE1s f\xE1ciles de entender. A continuaci\xF3n se incluye una lista de sugerencias para simplificar los componentes.</p><h2 id="extraer-llamadas-a-la-api" tabindex="-1">Extraer llamadas a la API <a class="header-anchor" href="#extraer-llamadas-a-la-api" aria-hidden="true">#</a></h2><p>Por lo general, realizar\xE1 varias solicitudes HTTP a lo largo de su aplicaci\xF3n. Desde una perspectiva de prueba, las solicitudes HTTP proporcionan entradas al componente y un componente tambi\xE9n puede enviar solicitudes HTTP.</p><div class="tip custom-block"><p class="custom-block-title">CONSEJO</p><p>Consulte la gu\xEDa <a href="./../vue-test-utils-en-profundidad/solicitudes-http.html">Realizando solicitudes HTTP</a> si no est\xE1 familiarizado con la prueba de llamadas API.</p></div><h2 id="extraer-metodos-complejos" tabindex="-1">Extraer m\xE9todos complejos <a class="header-anchor" href="#extraer-metodos-complejos" aria-hidden="true">#</a></h2><p>A veces, un componente puede presentar un m\xE9todo complejo, realizar c\xE1lculos pesados o usar varias dependencias.</p><p>La sugerencia aqu\xED es <strong>extraer este m\xE9todo e importarlo al componente</strong>. De esta forma, puede probar el m\xE9todo de forma aislada usando Vitest o cualquier otro corredor de prueba.</p><p>Esto tiene el beneficio adicional de terminar con un componente que es m\xE1s f\xE1cil de entender porque la l\xF3gica compleja est\xE1 encapsulada en otro archivo.</p><p>Adem\xE1s, si el m\xE9todo complejo es dif\xEDcil de configurar o lento, es posible que desee simularlo para que la prueba sea m\xE1s simple y r\xE1pida. Los ejemplos sobre <a href="./../vue-test-utils-en-profundidad/solicitudes-http.html">realizando solicitudes HTTP</a> son un buen ejemplo: \xA1axios es una biblioteca bastante compleja!</p><h2 id="escribir-pruebas-antes-de-escribir-el-componente" tabindex="-1">Escribir pruebas antes de escribir el componente. <a class="header-anchor" href="#escribir-pruebas-antes-de-escribir-el-componente" aria-hidden="true">#</a></h2><p>\xA1No puede escribir c\xF3digo no verificable si escribe pruebas de antemano!</p><p>Nuestro <a href="./../esencial/un-curso-acelerado.html">Curso Acelerado</a> ofrece un ejemplo de c\xF3mo escribir pruebas antes del c\xF3digo conduce a componentes comprobables. Tambi\xE9n lo ayuda a detectar y probar casos extremos.</p>`,34),p=[o];function c(l,i,r,u,d,k){return s(),a("div",null,p)}var g=n(t,[["render",c]]);export{b as __pageData,g as default};
