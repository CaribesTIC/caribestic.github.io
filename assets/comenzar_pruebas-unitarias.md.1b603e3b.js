import{_ as a,c as e,o as s,a as r}from"./app.0b30a2fc.js";const g='{"title":"Pruebas unitarias","description":"","frontmatter":{},"headers":[{"level":2,"title":"\xBFQu\xE9 son las pruebas unitarias?","slug":"\xBFque-son-las-pruebas-unitarias"},{"level":2,"title":"Motivos para realizar un test unitario","slug":"motivos-para-realizar-un-test-unitario"},{"level":2,"title":"Buenas pr\xE1cticas para los tests unitarios","slug":"buenas-practicas-para-los-tests-unitarios"}],"relativePath":"comenzar/pruebas-unitarias.md"}',o={},i=r('<h1 id="pruebas-unitarias" tabindex="-1">Pruebas unitarias <a class="header-anchor" href="#pruebas-unitarias" aria-hidden="true">#</a></h1><p>Las pruebas unitarias o unit testing son una forma de comprobar que un fragmento de c\xF3digo funciona correctamente.</p><h2 id="\xBFque-son-las-pruebas-unitarias" tabindex="-1">\xBFQu\xE9 son las pruebas unitarias? <a class="header-anchor" href="#\xBFque-son-las-pruebas-unitarias" aria-hidden="true">#</a></h2><p>Las pruebas unitarias consisten en aislar una parte del c\xF3digo y comprobar que funciona a la perfecci\xF3n. Son peque\xF1os tests que validan el comportamiento de un objeto y la l\xF3gica.</p><p>El unit testing suele realizarse durante la fase de desarrollo de aplicaciones de software o m\xF3viles. Normalmente las llevan a cabo los desarrolladores, aunque en la pr\xE1ctica, tambi\xE9n pueden realizarlas los responsables de QA.</p><p>Hay una especie de mito respecto a las pruebas unitarias. Algunos desarrolladores est\xE1n convencidos de que son una p\xE9rdida de tiempo y las evitan buscando ahorrar tiempo. Nada m\xE1s alejado de la realidad.</p><p>Con ellas se detectan antes errores que, sin las pruebas unitarias, no se podr\xEDan detectar hasta fases m\xE1s avanzadas como las pruebas de sistema, de integraci\xF3n e incluso en la beta.</p><p>Realizar pruebas unitarias con regularidad supone, al final, un ahorro de tiempo y dinero.</p><h2 id="motivos-para-realizar-un-test-unitario" tabindex="-1">Motivos para realizar un test unitario <a class="header-anchor" href="#motivos-para-realizar-un-test-unitario" aria-hidden="true">#</a></h2><p>Si todav\xEDa no est\xE1s del todo seguro de por qu\xE9 debes incorporar las unit testing a tu d\xEDa a d\xEDa como desarrollador, te damos algunos motivos:</p><ul><li>Las pruebas unitarias demuestran que la <strong>l\xF3gica del c\xF3digo</strong> est\xE1 en buen estado y que funcionar\xE1 en todos los casos.</li><li>Aumentan la <strong>legibilidad del c\xF3digo</strong> y ayudan a los desarrolladores a entender el c\xF3digo base, lo que facilita hacer cambios m\xE1s r\xE1pidamente.</li><li>Los test unitarios bien realizados sirven como <strong>documentaci\xF3n</strong> del proyecto.</li><li>Se realizan en <strong>pocos milisegundos</strong>, por lo que podr\xE1s realizar cientos de ellas en muy poco tiempo.</li><li>Las unit testing permiten al desarrollador <strong>refactorizar el c\xF3digo</strong> m\xE1s adelante y tener la garant\xEDa de que el m\xF3dulo sigue funcionando correctamente. Para ello se escriben casos de prueba para todas las funciones y m\xE9todos, para que cada vez que un cambio provoque un error, sea posible identificarlo y repararlo r\xE1pidamente.</li><li>La <strong>calidad final</strong> del c\xF3digo mejorar\xE1 ya que, al estar realizando pruebas de manera continua, al finalizar el c\xF3digo ser\xE1 limpio y de calidad.</li><li>Como las pruebas unitarias dividen el c\xF3digo en peque\xF1os fragmentos, es posible <strong>probar distintas partes del proyecto</strong> sin tener que esperar a que otras est\xE9n completadas.</li></ul><h2 id="buenas-practicas-para-los-tests-unitarios" tabindex="-1">Buenas pr\xE1cticas para los tests unitarios <a class="header-anchor" href="#buenas-practicas-para-los-tests-unitarios" aria-hidden="true">#</a></h2><p>Una vez te acostumbres a realizar este tipo de pruebas ir\xE1s descubriendo todas sus ventajas. Sin embargo, si todav\xEDa no tienes experiencia, vamos a ver algunos <strong>ejemplos de buenas pr\xE1cticas en las pruebas unitarias de software</strong>.</p><ul><li><strong>Las pruebas unitarias deber\xEDan ser independientes.</strong> Si se produce cualquier tipo de mejora o cambio en los requerimientos, las pruebas unitarias no deber\xEDan verse afectados.</li><li><strong>Prueba s\xF3lo un c\xF3digo a la vez.</strong></li><li><strong>Sigue un esquema claro.</strong> Puede parecer algo secundario, pero no lo es. S\xE9 tambi\xE9n consistente a la hora de nombrar tus unit tests.</li><li><strong>Cualquier cambio necesita pasar el test.</strong> En el caso de producirse un cambio en el c\xF3digo de cualquier m\xF3dulo, aseg\xFArate de que hay una prueba unitaria que se corresponda con ese m\xF3dulo y que este pasa las pruebas antes de cambiar la implementaci\xF3n.</li><li><strong>Corrige los bugs identificados durante las pruebas antes de continuar.</strong> Aseg\xFArate de realizar esta correcci\xF3n antes de proseguir con la siguiente fase del ciclo de vida del desarrollo de software.</li><li><strong>Acost\xFAmbrate a realizar pruebas regularmente mientras programas.</strong> Cuanto m\xE1s c\xF3digo escribas sin testar, m\xE1s caminos tendr\xE1s que revisar para encontrar errores.</li></ul><p>No puedes esperar que las pruebas unitarias descubran todos los errores de un software, pero s\xED que ahorran mucho tiempo al facilitar localizar los errores de una manera m\xE1s sencilla.</p>',15),n=[i];function t(l,u,d,c,p,m){return s(),e("div",null,n)}var h=a(o,[["render",t]]);export{g as __pageData,h as default};
