import{_ as n,c as s,o as a,a as t}from"./app.3b8232bf.js";const f='{"title":"Funciones Simuladas","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usando una funci\xF3n simulada","slug":"usando-una-funcion-simulada"},{"level":2,"title":"Propiedad .mock","slug":"propiedad-mock"},{"level":2,"title":"Valores de Retorno Simulados","slug":"valores-de-retorno-simulados"},{"level":2,"title":"M\xF3dulos Simulados","slug":"modulos-simulados"},{"level":2,"title":"Simulaciones Parciales","slug":"simulaciones-parciales"},{"level":2,"title":"Implementaciones Simuladas","slug":"implementaciones-simuladas"},{"level":2,"title":"Nombres Simulados","slug":"nombres-simulados"},{"level":2,"title":"Comparadores Personalizados","slug":"comparadores-personalizados"}],"relativePath":"vitest/funciones-simuladas.md"}',p={},o=t(`<h1 id="funciones-simuladas" tabindex="-1">Funciones Simuladas <a class="header-anchor" href="#funciones-simuladas" aria-hidden="true">#</a></h1><p>Las funciones simuladas le permiten probar los v\xEDnculos entre el c\xF3digo borrando la implementaci\xF3n real de una funci\xF3n, capturando llamadas a la funci\xF3n (y los par\xE1metros pasados en esas llamadas), capturando instancias de funciones de constructor cuando se instancian con nuevas y permitiendo la configuraci\xF3n en tiempo de prueba de valores de retorno.</p><p>Hay dos formas de simular funciones: ya sea creando una funci\xF3n simulada para usar en el c\xF3digo de prueba o escribiendo una simulaci\xF3n manual para anular la dependencia de un m\xF3dulo. Una explicaci\xF3n m\xE1s espec\xEDfica de c\xF3mo hacer simulaciones manuales la podemos encontrar en la documentaci\xF3n oficial de <a href="https://jestjs.io/docs/manual-mocks" target="_blank" rel="noopener noreferrer">Jest</a>.</p><h2 id="usando-una-funcion-simulada" tabindex="-1">Usando una funci\xF3n simulada <a class="header-anchor" href="#usando-una-funcion-simulada" aria-hidden="true">#</a></h2><p>Imaginemos que estamos probando una implementaci\xF3n de una funci\xF3n <code>forEach</code>, que invoca una devoluci\xF3n de llamada para cada elemento en una matriz proporcionada.</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">items<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Para probar esta funci\xF3n, podemos usar una funci\xF3n simulada e inspeccionar el estado del simulacro para asegurarnos de que la devoluci\xF3n de llamada se invoque como se esperaba.</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;using a mock function&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mockCallback <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token number">42</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mockCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The mock function is called twice</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockCallback<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The first argument of the first call to the function was 0</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockCallback<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The first argument of the second call to the function was 1</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockCallback<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The return value of the first call to the function was 42</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockCallback<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="propiedad-mock" tabindex="-1">Propiedad .mock <a class="header-anchor" href="#propiedad-mock" aria-hidden="true">#</a></h2><p>Todas las funciones simuladas tienen esta propiedad especial <code>.mock</code>, que es donde se guardan los datos sobre c\xF3mo se llam\xF3 a la funci\xF3n y qu\xE9 devolvi\xF3 la funci\xF3n. La propiedad <code>.mock</code> tambi\xE9n rastrea el valor de esto para cada llamada, por lo que tambi\xE9n es posible inspeccionar esto:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;exploring a mock property&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myMock <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> bound <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &gt; [ &lt;a&gt;, &lt;b&gt; ]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Estos miembros simulados son muy \xFAtiles en las pruebas para afirmar c\xF3mo se llama a estas funciones, se crean instancias o lo que devuelven:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;more exploring mock properties&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> myMock <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myMock</span><span class="token punctuation">(</span><span class="token string">&#39;first arg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;second arg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// The function was called exactly once</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// The first arg of the first call to the function was &#39;first arg&#39;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;first arg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// The second arg of the first call to the function was &#39;second arg&#39;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;second arg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// This function was instantiated exactly once</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="valores-de-retorno-simulados" tabindex="-1">Valores de Retorno Simulados <a class="header-anchor" href="#valores-de-retorno-simulados" aria-hidden="true">#</a></h2><p>Las funciones simuladas tambi\xE9n se pueden usar para inyectar valores de prueba en su c\xF3digo durante una prueba:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock return value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> myMock <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    myMock
        <span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token string">&#39;return value&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token string">&#39;return another value&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The return value of the first call to </span>
    <span class="token comment">// the function was &#39;return value&#39;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;return value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
    <span class="token comment">// The return value of the second call to</span>
    <span class="token comment">// the function was &#39;return another value&#39;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;return another value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// This function was instantiated exactly twice</span>
   <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>   
   
   <span class="token comment">// The object returned by the first instantiation of this function</span>
   <span class="token comment">// had a \`name\` property whose value was set to &#39;test&#39;   </span>
   <span class="token comment">// jest ===&gt;&gt;&gt;&gt; expect(myMock.mock.instances[0].name).toEqual(&#39;test&#39;);   </span>
   <span class="token function">expect</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>M\xE1s valores de retorno simulado</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;more mock return value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> myMock <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    myMock
        <span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">mockReturnValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token function">myMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>myMock<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Las funciones simuladas tambi\xE9n son muy efectivas en el c\xF3digo que usa un estilo funcional de paso de continuaci\xF3n. El c\xF3digo escrito en este estilo ayuda a evitar la necesidad de stubs complicados que recrean el comportamiento del componente real que representan, a favor de inyectar valores directamente en la prueba justo antes de que se usen.</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock filter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    
    <span class="token keyword">const</span> filterTestFn <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Make the mock return \`true\` for the first call,</span>
    <span class="token comment">// and \`false\` for the second call</span>
    filterTestFn<span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockReturnValueOnce</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token function">filterTestFn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//console.log(result); // &gt; [11]</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//console.log(filterTestFn.mock.calls[0][0]); // 11</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>filterTestFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//console.log(filterTestFn.mock.calls[1][0]); // 12</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>filterTestFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>La mayor\xEDa de los ejemplos del mundo real en realidad implican obtener una funci\xF3n simulada en un componente dependiente y configurarlo, pero la t\xE9cnica es la misma. En estos casos, trate de evitar la tentaci\xF3n de implementar la l\xF3gica dentro de cualquier funci\xF3n que no se est\xE9 probando directamente.</p><h2 id="modulos-simulados" tabindex="-1">M\xF3dulos Simulados <a class="header-anchor" href="#modulos-simulados" aria-hidden="true">#</a></h2><p>Supongamos que tenemos una clase que obtiene usuarios de nuestra API. La clase usa axios para llamar a la API y luego devuelve el atributo de datos que contiene a todos los usuarios:</p><p><code>models/Users.js</code></p><div class="language-js"><pre><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Users</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/users.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Users<span class="token punctuation">;</span>
</code></pre></div><p>Ahora, para probar este m\xE9todo sin tocar la API (y, por lo tanto, crear pruebas lentas y fr\xE1giles), podemos usar la funci\xF3n <code>vi.mock(...)</code> para simular autom\xE1ticamente el m\xF3dulo axios.</p><p>Una vez que simulamos el m\xF3dulo, podemos proporcionar un <code>mockResolvedValue</code> para <code>.get</code> que devuelve los datos contra los que queremos que se afirme nuestra prueba. En efecto, estamos diciendo que queremos que <code>axios.get(&#39;/users.json&#39;)</code> devuelva una respuesta falsificada.</p><p><code>users.test.js</code></p><div class="language-js"><pre><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Users <span class="token keyword">from</span> <span class="token string">&#39;@/models/Users&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//vi.mock(&#39;axios&#39;);</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should fetch users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> users<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">//axios.get.mockResolvedValue(resp);</span>
  axios<span class="token punctuation">.</span>get <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// or you could use the following depending on your use case:</span>
  <span class="token comment">// axios.get = vi.fn().mockImplementation(() =&gt; Promise.resolve(resp))</span>

  <span class="token keyword">return</span> Users<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="simulaciones-parciales" tabindex="-1">Simulaciones Parciales <a class="header-anchor" href="#simulaciones-parciales" aria-hidden="true">#</a></h2><p>Los subconjuntos de un m\xF3dulo se pueden simular y el resto del m\xF3dulo puede mantener su implementaci\xF3n real:</p><p><code>foo-bar-baz.js</code></p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p><code>test.js</code></p><div class="language-js"><pre><code><span class="token keyword">import</span> defaultExport<span class="token punctuation">,</span> <span class="token punctuation">{</span>bar<span class="token punctuation">,</span> foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/foo-bar-baz&#39;</span><span class="token punctuation">;</span>

vi<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;@/foo-bar-baz&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//const originalModule = jest.requireActual(&#39;../foo-bar-baz&#39;);</span>
  <span class="token keyword">const</span> originalModule <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">importActual</span><span class="token punctuation">(</span><span class="token string">&#39;@/foo-bar-baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//Mock the default export and named export &#39;foo&#39;</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">__esModule</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//... originalModule,</span>
    <span class="token operator">...</span> <span class="token keyword">await</span> originalModule<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;mocked baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;mocked foo&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should do a partial mock&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> defaultExportResult <span class="token operator">=</span> <span class="token function">defaultExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>defaultExportResult<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;mocked baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>defaultExport<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;mocked foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="implementaciones-simuladas" tabindex="-1">Implementaciones Simuladas <a class="header-anchor" href="#implementaciones-simuladas" aria-hidden="true">#</a></h2><p>A\xFAn as\xED, hay casos en los que es \xFAtil ir m\xE1s all\xE1 de la capacidad de especificar valores de retorno y reemplazar completamente la implementaci\xF3n de una funci\xF3n simulada. Esto se puede hacer con <code>vi.fn</code> o el m\xE9todo <code>mockImplementationOnce</code> en funciones simuladas.</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock simulation implementations&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myMockFn <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>El m\xE9todo <code>mockImplementation</code> es \xFAtil cuando necesita definir la implementaci\xF3n predeterminada de una funci\xF3n simulada que se crea a partir de otro m\xF3dulo:</p><p><code>foo.js</code></p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// some implementation;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><code>test.js</code></p><div class="language-js"><pre><code><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;@/foo&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;foo is a mock function&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  vi<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;@/foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this happens automatically with automocking    </span>

  <span class="token comment">// foo is a mock function</span>
  foo<span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Cuando necesite recrear un comportamiento complejo de una funci\xF3n simulada de modo que varias llamadas a funciones produzcan resultados diferentes, use el m\xE9todo <code>mockImplementationOnce</code>:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock implementation once&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myMockFn <span class="token operator">=</span> vi
    <span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Cuando la funci\xF3n simulada se queda sin implementaciones definidas con <code>mockImplementationOnce</code>, ejecutar\xE1 la implementaci\xF3n predeterminada establecida con <code>vi.fn</code> (si est\xE1 definida):</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mocked function it will execute the default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> myMockFn <span class="token operator">=</span> vi
      <span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;first call&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;second call&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;first call&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;second call&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Para los casos en los que tenemos m\xE9todos que normalmente est\xE1n encadenados (y, por lo tanto, siempre necesitamos devolver <code>this</code>), tenemos una API azucarada para simplificar esto en forma de una funci\xF3n <code>.mockReturnThis()</code> que tambi\xE9n se encuentra en todos las simulaciones:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock return this&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">myMethod</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockReturnThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// is the same as</span>

  <span class="token keyword">const</span> otherObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">myMethod</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>otherObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="nombres-simulados" tabindex="-1">Nombres Simulados <a class="header-anchor" href="#nombres-simulados" aria-hidden="true">#</a></h2><p>Opcionalmente, puede proporcionar un nombre para sus funciones simuladas, que se mostrar\xE1n en lugar de &quot;vi.fn()&quot; en la salida de error de prueba. Use esto si desea poder identificar r\xE1pidamente la funci\xF3n simulada que informa un error en su salida de prueba.</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;make fun of names&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myMockFn <span class="token operator">=</span> vi
    <span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">mockReturnValue</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">//.mockImplementation(scalar =&gt; 42 + scalar)</span>
    <span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token parameter">scalar</span> <span class="token operator">=&gt;</span> <span class="token number">42</span> <span class="token operator">+</span> scalar<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">mockName</span><span class="token punctuation">(</span><span class="token string">&#39;add42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token function">expect</span><span class="token punctuation">(</span>myMockFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>myMockFn<span class="token punctuation">.</span><span class="token function">getMockName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;add42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token function">myMockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token function">expect</span><span class="token punctuation">(</span>myMockFn<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>myMockFn<span class="token punctuation">.</span><span class="token function">getMockName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;add42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="comparadores-personalizados" tabindex="-1">Comparadores Personalizados <a class="header-anchor" href="#comparadores-personalizados" aria-hidden="true">#</a></h2><p>Finalmente, para que sea menos exigente afirmar c\xF3mo se han llamado las funciones simuladas, se han agregado algunas funciones de comparaci\xF3n personalizadas:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;custom matcher functions&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mockFunc <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

  <span class="token function">mockFunc</span><span class="token punctuation">(</span><span class="token string">&quot;arg1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The mock function was called at least once with the specified args</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span><span class="token string">&quot;arg1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token function">mockFunc</span><span class="token punctuation">(</span><span class="token string">&quot;arg3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// The last call to the mock function was called with the specified args</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span><span class="token string">&quot;arg3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// All calls and the name of the mock is written as a snapshot </span>
  <span class="token comment">//expect(mockFunc).toMatchSnapshot();</span>
    <span class="token comment">/*Snapshots  1 obsolete
            \u21B3 test/commonMatchers.test.js
              \xB7 mock simulation implementations 1*/</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Estos comparadores son az\xFAcar para las formas comunes de inspeccionar la propiedad <code>.mock</code>. Siempre puede hacerlo manualmente usted mismo si le gusta m\xE1s o si necesita hacer algo m\xE1s espec\xEDfico:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;do this manually whithout sugar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mockFunc <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockName</span><span class="token punctuation">(</span><span class="token string">&#39;a mock name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

  <span class="token function">mockFunc</span><span class="token punctuation">(</span><span class="token string">&quot;arg1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// The mock function was called at least once</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The mock function was called at least once with the specified args</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;arg1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mockFunc</span><span class="token punctuation">(</span><span class="token string">&quot;arg3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// The last call to the mock function was called with the specified args</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span>mockFunc<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;arg3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;arg4&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The first arg of the last call to the mock function was \`42\`</span>
  <span class="token comment">// (note that there is no sugar helper for this specific of an assertion)</span>
  <span class="token function">mockFunc</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span>mockFunc<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// A snapshot will check that a mock was invoked the same number of times,</span>
  <span class="token comment">// in the same order, with the same arguments. Tambi\xE9n afirmar\xE1 en el nombre.</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunc<span class="token punctuation">.</span><span class="token function">getMockName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;a mock name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Para obtener una lista completa de comparadores, consulte los <a href="https://vitest.dev/api/" target="_blank" rel="noopener noreferrer">documentos de referencia</a>.</p>`,58),c=[o];function e(u,l,i,k,r,m){return a(),s("div",null,c)}var g=n(p,[["render",e]]);export{f as __pageData,g as default};
