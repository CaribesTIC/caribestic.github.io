import{_ as s,c as n,o as a,a as e}from"./app.74b39d42.js";const _='{"title":"\xBFQu\xE9 es Vue Test Utils?","description":"","frontmatter":{},"headers":[{"level":2,"title":"\xBF Qu\xE9 aprenderemos aqu\xED ?","slug":"\xBF-que-aprenderemos-aqui"}],"relativePath":"vtu/esencial/intro.md"}',t={},o=e(`<h1 id="\xBFque-es-vue-test-utils" tabindex="-1">\xBFQu\xE9 es Vue Test Utils? <a class="header-anchor" href="#\xBFque-es-vue-test-utils" aria-hidden="true">#</a></h1><p>Vue Test Utils (VTU), \xA1la biblioteca oficial de utilidades de prueba para Vue.js! Es un conjunto de funciones de utilidad destinadas a simplificar las pruebas de los componentes de Vue.js. Proporciona algunos m\xE9todos para montar e interactuar con los componentes de Vue de forma aislada.</p><p>Veamos un ejemplo:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>

<span class="token comment">// The component to test</span>
<span class="token keyword">const</span> MessageComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;p&gt;{{ msg }}&lt;/p&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;displays message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MessageComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Hello world&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// Assert the rendered text of the component</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="\xBF-que-aprenderemos-aqui" tabindex="-1">\xBF Qu\xE9 aprenderemos aqu\xED ? <a class="header-anchor" href="#\xBF-que-aprenderemos-aqui" aria-hidden="true">#</a></h2><p>Aqu\xED hay una colecci\xF3n de ejemplos breves y enfocados en c\xF3mo probar los componentes de Vue. Utiliza vue-test-utils, la biblioteca oficial para probar los componentes de Vue, y Vitest, un marco de prueba moderno. Cubre la API vue-test-utils, as\xED como las mejores pr\xE1cticas para probar componentes.</p><p>Cada secci\xF3n es independiente de las dem\xE1s. Comenzamos a escribir una prueba simple. A continuaci\xF3n, se analizan dos formas de renderizar un componente: montar y montaje superficial. Las diferencias ser\xE1n demostradas y explicadas.</p><p>De ah\xED en adelante, cubriremos c\xF3mo probar varios escenarios que surgen al probar componentes, como probar componentes que:</p><ul><li>Reciben accesorios</li><li>Usan propiedades calculadas</li><li>Renderizan otros componentes</li><li>Emiten eventos</li></ul><p>Y as\xED sucesivamente. Luego pasamos a casos m\xE1s interesantes, como:</p><ul><li>Mejores pr\xE1cticas para probar Vuex (en componentes e independientemente)</li><li>Probando el enrutador Vue</li><li>Pruebas con componentes de terceros</li></ul><p>Tambi\xE9n exploraremos c\xF3mo usar la API de Vitest para hacer que nuestras pruebas sean m\xE1s s\xF3lidas, como por ejemplo:</p><ul><li>Burlarse de las respuestas de la API</li><li>Burlarse y espiar m\xF3dulos</li><li>Uso de instant\xE1neas</li></ul>`,13),p=[o];function c(r,l,i,u,d,m){return a(),n("div",null,p)}var b=s(t,[["render",c]]);export{_ as __pageData,b as default};
