import{_ as n,c as s,o as a,a as e}from"./app.7cdb76e5.js";const g='{"title":"Filosof\xEDa","description":"","frontmatter":{},"headers":[],"relativePath":"vtl/psyc/filosofia.md"}',o={},t=e(`<h1 id="filosofia" tabindex="-1">Filosof\xEDa <a class="header-anchor" href="#filosofia" aria-hidden="true">#</a></h1><div class="info custom-block"><p class="custom-block-title">Prueba</p><p><a href="https://www.youtube.com/watch?v=NWxiYaf0_Xs&amp;list=PLC2LZCNWKL9YdD4Z4V6guveajQoKN8rui&amp;index=2" target="_blank" rel="noopener noreferrer">Esta lecci\xF3n en video</a></p></div><p>Antes de continuar y discutir algunas de las diferencias entre <code>getByText</code> y otros selectores, es importante discutir la filosof\xEDa de Vue Testing Library y como funciona todo aqu\xED.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@testing-library/vue&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@testing-library/jest-dom&quot;</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;@/components/HelloWorld.vue&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld.vue&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;renders props.msg when passed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&quot;new message&quot;</span>
    <span class="token comment">// wrapper</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> getByText <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getByText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Una cosa que notar\xE1 es que aunque tenemos un valor de retorno de la funci\xF3n <code>render</code>, no llamamos a ese envoltorio. Y eso se debe a que en Vue Testing Library no es realmente un envoltorio.</p><p>En Vue Test Utils ciertamente se obtiene un envoltorio que tiene todos esos m\xE9todos convenientes para probar los componentes. As\xED como establecer <code>props</code>, <code>data</code>, etc. y as\xED sucesivamente.</p><p>A diferencia, en Vue Testing Library en realidad no estamos obteniendo un contenedor y la idea general es no pensar en las cosas desde el punto de vista de un componente. Vue Test Utils est\xE1 muy centrado en el componente. Por otro lado, Vue Testing Library est\xE1 centrado en el usuario, le gusta centrarse en las acciones que los usuarios pueden realizar.</p><p>Si echamos un vistazo a su <a href="https://testing-library.com/docs/" target="_blank" rel="noopener noreferrer">sitio web</a> podemos ver qu\xE9 quieren lograr. Anima a probar la interfaz del usuario en lugar de los detalles de implementaci\xF3n. Y esto definitavamente es una raz\xF3n de peso. Por lo que esa es la fuerza impulsora detr\xE1s de Vue Testing Library. Realmente queremos probar c\xF3mo funciona nuestro componente o c\xF3mo se comporta en comparaci\xF3n con los detalles de implementaci\xF3n.</p><p>Lo que estamos haciendo aqu\xED es simular lo que hace un usuario, por lo que un mejor nombre para esta variable aqu\xED ser\xEDa algo como <code>user</code>.</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@testing-library/vue&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@testing-library/jest-dom&quot;</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;@/components/HelloWorld.vue&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld.vue&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;renders props.msg when passed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&quot;new message&quot;</span>
    <span class="token comment">// wrapper</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>La idea es que el usuario obtendr\xE1 algo por mensaje de texto, obviamente, eso es algo que un usuario hace, usan sus ojos para seleccionar visualmente algo en una p\xE1gina. Es por eso que luce bien llamar a esto <code>user</code>.</p><p>Sin embargo, lo que es mucho m\xE1s com\xFAn en la comunidad de Vue Testing Library, por lo que se puede decir, es simplemente renderizar nuestro componente e importar una variable llamada <code>screen</code> y esto va a tener todas las API de Vue Testing Library adjuntas. Lo cual es realmente conveniente.</p><p>Ahora podemos seguir adelante y hacer un <code>screen.getByText</code> y esto va para encontrar cualquier texto en la pantalla que contenga lo declarado en <code>msg</code>.</p><div class="language-js"><div class="highlight-lines"><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@testing-library/vue&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@testing-library/jest-dom&quot;</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;@/components/HelloWorld.vue&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld.vue&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;renders props.msg when passed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&quot;new message&quot;</span>
    <span class="token comment">// wrapper</span>
    <span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Y eso es algo que el usuario har\xEDa desde su punto de vista.</p><p>Si seguimos adelante y guardamos y ejecutamos esta prueba...</p><div class="language-"><pre><code> RERUN  rerun all

 \u221A tests/components/helloworld.spec.js (1)

Test Files  1 passed (1)
     Tests  1 passed (1)
      Time  52ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
</code></pre></div><p>... podemos ver que definitivamente pasar\xE1.</p><p>Ahora que hemos hablado un poco sobre esta filosof\xEDa, pasemos a la siguiente lecci\xF3n y hablemos sobre las diferentes formas en que podemos seleccionar nodos y c\xF3mo se diferencian.</p>`,19),p=[t];function c(u,l,r,i,d,k){return a(),s("div",null,p)}var h=n(o,[["render",c]]);export{g as __pageData,h as default};
