import{_ as n,c as a,o as s,a as t}from"./app.6d5336e7.js";const g='{"title":"La API de Composici\xF3n","description":"","frontmatter":{},"headers":[{"level":2,"title":"El Componente","slug":"el-componente"},{"level":2,"title":"Probando el Mensaje de Propiedades","slug":"probando-el-mensaje-de-propiedades"},{"level":2,"title":"Pruobando el Click del Bot\xF3n","slug":"pruobando-el-click-del-boton"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vth/api-de-composicion.md"}',p={},o=t(`<h1 id="la-api-de-composicion" tabindex="-1">La API de Composici\xF3n <a class="header-anchor" href="#la-api-de-composicion" aria-hidden="true">#</a></h1><p>Vue 3 introdujo una nueva API para crear componentes: la <a href="https://vuejs.org/guide/extras/composition-api-faq.html" target="_blank" rel="noopener noreferrer">API de Composici\xF3n</a>.</p><p>Probar la compilaci\xF3n de un componente con la API de composici\xF3n no deber\xEDa ser diferente a probar un componente est\xE1ndar, ya que no estamos probando la implementaci\xF3n, sino el resultado (<em>qu\xE9</em> hace el componente, no <em>c\xF3mo</em> lo hace). Este art\xEDculo mostrar\xE1 un ejemplo simple de un componente que usa la API de Composici\xF3n en Vue 2 y c\xF3mo las estrategias de prueba son las mismas que cualquier otro componente.</p><p>El c\xF3digo fuente de la prueba descrita en esta p\xE1gina se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/CompositionApi.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><h2 id="el-componente" tabindex="-1">El Componente <a class="header-anchor" href="#el-componente" aria-hidden="true">#</a></h2><p>Debajo del &quot;Hello, World&quot; de la API de Composici\xF3n, m\xE1s o menos. Si no entiende algo, <a href="https://vuejs.org/guide/extras/composition-api-faq.html" target="_blank" rel="noopener noreferrer">lea el RFC</a> o tenga un Google; hay muchos recursos sobre la API de Composici\xF3n.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ uppercasedMessage }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      Count: {{ state.count }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Increment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;CompositionApi&#39;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">,</span>
      increment<span class="token punctuation">,</span>
      <span class="token literal-property property">uppercasedMessage</span><span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Las dos cosas que tendremos que probar aqu\xED son:</p><ol><li>\xBFHacer click en el bot\xF3n de incremento aumenta <code>state.count</code> en 1?</li><li>\xBFEl mensaje recibido en las propiedades se representa correctamente (transformado a may\xFAsculas)?</li></ol><h2 id="probando-el-mensaje-de-propiedades" tabindex="-1">Probando el Mensaje de Propiedades <a class="header-anchor" href="#probando-el-mensaje-de-propiedades" aria-hidden="true">#</a></h2><p>Probar que el mensaje se represente correctamente es trivial. Solo usamos <code>props</code> para establecer el valor de la propiedad, como se describe aqu\xED.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>
<span class="token keyword">import</span> CompositionApi <span class="token keyword">from</span> <span class="token string">&quot;@/components/CompositionApi.vue&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;CompositionApi&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;renders a message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>CompositionApi<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Testing the composition API&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;TESTING THE COMPOSITION API&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Como era de esperar, esto es muy simple - independientemente de la forma en que compongamos los componentes, usamos la misma API y las mismas estrategias para probar. Deber\xEDa poder cambiar la implementaci\xF3n por completo y no necesitar tocar las pruebas. Recuerde probar las salidas (el HTML renderizado, usualmente) en funci\xF3n de las entradas dadas (<code>props</code>, <code>triggered</code>, <code>events</code>), no la implementaci\xF3n.</p><h2 id="pruobando-el-click-del-boton" tabindex="-1">Pruobando el Click del Bot\xF3n <a class="header-anchor" href="#pruobando-el-click-del-boton" aria-hidden="true">#</a></h2><p>Escribir una prueba para garantizar que al hacer click en el bot\xF3n se incremente el <code>state.count</code> es igualmente simple. Observe que la prueba est\xE1 marcada como <code>async</code>; lea m\xE1s sobre por qu\xE9 esto es necesario en <a href="./../vth/simulando-la-entrada-del-usuario.html#escribiendo-la-prueba">Simulando la Entrada del Usuario</a>.</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>
<span class="token keyword">import</span> CompositionApi <span class="token keyword">from</span> <span class="token string">&quot;@/components/CompositionApi.vue&quot;</span>

<span class="token keyword">const</span> <span class="token function-variable function">factory</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">mount</span><span class="token punctuation">(</span>CompositionApi<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;CompositionApi&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;renders a message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Testing the composition API&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;TESTING THE COMPOSITION API&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;increments a count when button is clicked&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;Count: 1&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Una vez m\xE1s, nada interesante - con <code>trigger</code> activamos el evento click y afirmamos que el renderizado de <code>count</code> aument\xF3. Tambi\xE9n observar\xE1 que en cada prueba a este componente es necesario mandar la propiedad <code>message</code>, de lo contrario arrojar\xE1 el siguiente error:</p><div class="language-"><pre><code>TypeError: Cannot read properties of undefined (reading &#39;toUpperCase&#39;)
</code></pre></div><p>Por lo tanto <a href="./../vth/probando-propiedades.html#refactorizando-las-pruebas">refactorizamos</a> siguiendo el principio <em>&quot;Don&#39;t Repeat Yourself&quot;</em> (DRY).</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>El art\xEDculo demuestra c\xF3mo probar un componente con la API de Composici\xF3n es id\xE9ntico a probar uno con la API de Opciones tradicional. Las ideas y los conceptos son los mismos. El punto principal que se debe aprender es al escribir pruebas, hacer afirmaciones basadas en entradas y salidas.</p><p>Deber\xEDa ser posible refactorizar cualquier componente tradicional de Vue para usar la API de Composici\xF3n sin necesidad de cambiar las pruebas unitarias. Si necesita cambiar sus pruebas al refactorizar, es probable que est\xE9 probando la <em>implementaci\xF3n</em>, no la salida.</p><p>Si bien es una caracter\xEDstica nueva y emocionante, la API de Composici\xF3n es completamente aditiva, por lo que no hay una necesidad inmediata de usarla; sin embargo, independientemente de su elecci\xF3n, recuerde que una buena prueba unitaria afirma el estado final del componente, sin considerar los detalles de implementaci\xF3n.</p>`,23),e=[o];function c(l,u,i,r,k,d){return s(),a("div",null,e)}var b=n(p,[["render",c]]);export{g as __pageData,b as default};
