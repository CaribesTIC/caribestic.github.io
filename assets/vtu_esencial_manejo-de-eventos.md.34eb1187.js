import{_ as n,c as s,o as a,a as t}from"./app.7cdb76e5.js";const h='{"title":"Manejo de Eventos","description":"","frontmatter":{},"headers":[{"level":2,"title":"El componente Contador","slug":"el-componente-contador"},{"level":2,"title":"Afirmar los eventos emitidos","slug":"afirmar-los-eventos-emitidos"},{"level":2,"title":"Afirmar los argumentos del evento","slug":"afirmar-los-argumentos-del-evento"},{"level":2,"title":"Afirmar eventos complejos","slug":"afirmar-eventos-complejos"},{"level":2,"title":"Composition API","slug":"composition-api"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vtu/esencial/manejo-de-eventos.md"}',e={},o=t(`<h1 id="manejo-de-eventos" tabindex="-1">Manejo de Eventos <a class="header-anchor" href="#manejo-de-eventos" aria-hidden="true">#</a></h1><p>Los componentes de Vue interact\xFAan entre s\xED a trav\xE9s de accesorios y emitiendo eventos llamando a <code>$emit</code>. En esta gu\xEDa, veremos c\xF3mo verificar que los eventos se emitan correctamente mediante la funci\xF3n <code>emitted()</code>.</p><p>Este art\xEDculo tambi\xE9n est\xE1 disponible como un <a href="https://www.youtube.com/watch?v=U_j-nDur4oU&amp;list=PLC2LZCNWKL9ahK1IoODqYxKu5aA9T5IOA&amp;index=14" target="_blank" rel="noopener noreferrer">video corto</a>.</p><h2 id="el-componente-contador" tabindex="-1">El componente Contador <a class="header-anchor" href="#el-componente-contador" aria-hidden="true">#</a></h2><p>Aqu\xED hay un componente <code>&lt;Counter&gt;</code> simple. Cuenta con un bot\xF3n que, cuando se hace click, incrementa una variable interna de conteo y emite su valor:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;button @click=&quot;handleClick&quot;&gt;Increment&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Para probar completamente este componente, debemos verificar que se emita un evento <code>increment</code> con el \xFAltimo valor <code>count</code>.</p><h2 id="afirmar-los-eventos-emitidos" tabindex="-1">Afirmar los eventos emitidos <a class="header-anchor" href="#afirmar-los-eventos-emitidos" aria-hidden="true">#</a></h2><p>Para hacerlo, nos basaremos en el m\xE9todo <code>emitted()</code>. <strong>Devuelve un objeto con todos los eventos que ha emitido el componente</strong> y sus argumentos en un arreglo. Vamos a ver c\xF3mo funciona:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;emits an event when clicked&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><blockquote><p>Si no ha visto <code>trigger()</code> antes, no se preocupe. Se utiliza para simular la interacci\xF3n del usuario. Puede obtener m\xE1s informaci\xF3n en <a href="./../esencial/formularios.html">Formularios</a>.</p></blockquote><p>Lo primero que debe notar es que <code>emitted()</code> devuelve un objeto, donde cada clave coincide con un evento emitido. En este caso, <code>increment</code>.</p><p>Esta prueba debe pasar. Nos aseguramos de emitir un evento con el nombre apropiado.</p><h2 id="afirmar-los-argumentos-del-evento" tabindex="-1">Afirmar los argumentos del evento <a class="header-anchor" href="#afirmar-los-argumentos-del-evento" aria-hidden="true">#</a></h2><p>Esto es bueno, \xA1pero podemos hacerlo mejor! Necesitamos comprobar que emitimos los argumentos correctos cuando se llama a <code>this.$emit(&#39;increment&#39;, this.count)</code>.</p><p>Nuestro siguiente paso es afirmar que el evento contiene el valor <code>count</code>. Lo hacemos pasando un argumento a <code>emitted()</code>.</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;emits an event with count when clicked&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// \`emitted()\` accepts an argument. It returns an array with all the</span>
  <span class="token comment">// occurrences of \`this.$emit(&#39;increment&#39;)\`.</span>
  <span class="token keyword">const</span> incrementEvent <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// We have &quot;clicked&quot; twice, so the array of \`increment\` should</span>
  <span class="token comment">// have two values.</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>incrementEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

  <span class="token comment">// Assert the result of the first click.</span>
  <span class="token comment">// Notice that the value is an array.</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>incrementEvent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// Then, the result of the second one.</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>incrementEvent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Recapitulemos y analicemos la salida de <code>emitted()</code>. Cada una de estas claves contiene los diferentes valores emitidos durante la prueba:</p><div class="language-js"><pre><code><span class="token comment">/**
 *  console.log(wrapper.emitted(&#39;increment&#39;));
 * [
 *   [1], // first time it is called, \`count\` is 1
 *   [2]  // second time it is called, \`count\` is 2
 * ]
 */</span>
</code></pre></div><h2 id="afirmar-eventos-complejos" tabindex="-1">Afirmar eventos complejos <a class="header-anchor" href="#afirmar-eventos-complejos" aria-hidden="true">#</a></h2><p>Imagina que ahora nuestro componente <code>&lt;Counter&gt;</code> necesita emitir un objeto con informaci\xF3n adicional. Por ejemplo, necesitamos decirle a cualquier componente principal que escuche el evento <code>@increment</code> si <code>count</code> es par o impar:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br></div><pre><code><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;button @click=&quot;handleClick&quot;&gt;Increment&lt;/button&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">,</span>
        <span class="token literal-property property">isEven</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Como hicimos antes, necesitamos activar el evento <code>click</code> en el elemento <code>&lt;button&gt;</code>. Luego, usamos <code>emitted(&#39;increment&#39;)</code> para asegurarnos de que se emitan los valores correctos.</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;emits an event with count when clicked&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// We have &quot;clicked&quot; twice, so the array of \`increment\` should</span>
  <span class="token comment">// have two values.</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

  <span class="token comment">// Then, we can make sure each element of \`wrapper.emitted(&#39;increment&#39;)\`</span>
  <span class="token comment">// contains an array with the expected object.</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isEven</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isEven</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Probar cargas \xFAtiles de eventos complejos, como Objetos, no es diferente de probar valores simples, como n\xFAmeros o cadenas.</p><h2 id="composition-api" tabindex="-1">Composition API <a class="header-anchor" href="#composition-api" aria-hidden="true">#</a></h2><p>Si est\xE1 utilizando la Composition API, llamar\xE1 a <code>context.emit()</code> en lugar de <code>this.$emit()</code>. <code>emitted()</code> captura eventos de ambos, por lo que puede probar su componente utilizando las mismas t\xE9cnicas descritas aqu\xED.</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><ul><li>Use <code>emitted()</code> para acceder a los eventos emitidos desde un componente Vue.</li><li><code>emitted(eventName)</code> devuelve un arreglo, donde cada elemento representa un evento emitido.</li><li>Los argumentos se almacenan en <code>emitted(eventName)[index]</code> en un arreglo en el mismo orden en que se emiten.</li></ul>`,29),p=[o];function c(u,i,l,r,k,d){return a(),s("div",null,p)}var v=n(e,[["render",c]]);export{h as __pageData,v as default};
