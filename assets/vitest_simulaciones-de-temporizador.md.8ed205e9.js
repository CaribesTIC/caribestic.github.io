import{_ as n,c as a,o as s,a as t}from"./app.9b0c39a4.js";const f='{"title":"Simulaciones de Temporizador","description":"","frontmatter":{},"headers":[{"level":2,"title":"Habilitar Temporizadores Falsos","slug":"habilitar-temporizadores-falsos"},{"level":2,"title":"Ejecutar Todos los Temporizadores","slug":"ejecutar-todos-los-temporizadores"},{"level":2,"title":"Ejecutar Temporizadores Pendientes","slug":"ejecutar-temporizadores-pendientes"},{"level":2,"title":"Temporizadores de avance por tiempo","slug":"temporizadores-de-avance-por-tiempo"},{"level":2,"title":"Falsificaci\xF3n Selectiva","slug":"falsificacion-selectiva"}],"relativePath":"vitest/simulaciones-de-temporizador.md"}',p={},e=t(`<h1 id="simulaciones-de-temporizador" tabindex="-1">Simulaciones de Temporizador <a class="header-anchor" href="#simulaciones-de-temporizador" aria-hidden="true">#</a></h1><p>Las funciones de temporizador nativas (es decir, <code>setTimeout()</code>, <code>setInterval()</code>, <code>clearTimeout()</code>, <code>clearInterval()</code>) son menos que ideales para un entorno de prueba, ya que dependen del tiempo real para transcurrir. Vitest puede intercambiar temporizadores con funciones que te permiten controlar el paso del tiempo. <a href="https://www.youtube.com/watch?v=QZoJ2Pt27BY" target="_blank" rel="noopener noreferrer">\xA1Gran Scott!</a></p><div class="info custom-block"><p class="custom-block-title">Informaci\xF3n</p><p>Consulte tambi\xE9n la documentaci\xF3n de la <a href="https://vitest.dev/api/#vi-usefaketimers" target="_blank" rel="noopener noreferrer">API de temporizadores falsos</a>.</p></div><h2 id="habilitar-temporizadores-falsos" tabindex="-1">Habilitar Temporizadores Falsos <a class="header-anchor" href="#habilitar-temporizadores-falsos" aria-hidden="true">#</a></h2><p>En el siguiente ejemplo, habilitamos temporizadores falsos llamando a vi.useFakeTimers(). Esto reemplaza la implementaci\xF3n original de <code>setTimeout()</code> y otras funciones de temporizador. Los temporizadores se pueden restaurar a su comportamiento normal con <code>vi.useRealTimers()</code>.</p><div class="language-js"><pre><code><span class="token comment">// timerGame.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">timerGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready....go!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Time&#39;s up -- stop!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> timerGame<span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token comment">// timerGame.spec.js</span>
<span class="token keyword">import</span> timerGame <span class="token keyword">from</span> <span class="token string">&#39;@/timerGame&#39;</span><span class="token punctuation">;</span>

vi<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;waits 1 second before ending the game&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  vi<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">timerGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="ejecutar-todos-los-temporizadores" tabindex="-1">Ejecutar Todos los Temporizadores <a class="header-anchor" href="#ejecutar-todos-los-temporizadores" aria-hidden="true">#</a></h2><p>Otra prueba que podr\xEDamos querer escribir para este m\xF3dulo es una que afirme que la devoluci\xF3n de llamada se llama despu\xE9s de 1 segundo. Para hacer esto, vamos a usar las API de control de temporizador de Vitest para acelerar el tiempo justo en el medio de la prueba:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;calls the callback after 1 second&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
  <span class="token keyword">const</span> callback <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">timerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// At this point in time, the callback should not have been called yet</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Fast-forward until all timers have been executed</span>
  vi<span class="token punctuation">.</span><span class="token function">runAllTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Now our callback should have been called!</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="ejecutar-temporizadores-pendientes" tabindex="-1">Ejecutar Temporizadores Pendientes <a class="header-anchor" href="#ejecutar-temporizadores-pendientes" aria-hidden="true">#</a></h2><p>Tambi\xE9n hay escenarios en los que podr\xEDa tener un temporizador recursivo, es decir, un temporizador que establece un nuevo temporizador en su propia devoluci\xF3n de llamada. Para estos, ejecutar todos los temporizadores ser\xEDa un ciclo sin fin, lanzando el siguiente error: <em>&quot;Aborting after running 100000 timers, assuming an infinite loop!&quot;</em>.</p><p>Si ese es tu caso, usar <code>vi.runOnlyPendingTimers()</code> resolver\xE1 el problema:</p><div class="language-js"><pre><code><span class="token comment">// infiniteTimerGame.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">infiniteTimerGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready....go!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Time&#39;s up! 10 seconds before the next game starts...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Schedule the next game in 10 seconds</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> infiniteTimerGame<span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token comment">// infiniteTimerGame.spec.js</span>
<span class="token keyword">import</span> infiniteTimerGame <span class="token keyword">from</span> <span class="token string">&#39;@/infiniteTimerGame&#39;</span><span class="token punctuation">;</span>

vi<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;infiniteTimerGame&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;schedules a 10-second timer after 1 second&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    vi<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> callback <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">infiniteTimerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// At this point in time, there should have been a single call to</span>
    <span class="token comment">// setTimeout to schedule the end of the game in 1 second.</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Fast forward and exhaust only currently pending timers</span>
    <span class="token comment">// (but not any new timers that get created during that process)</span>
    vi<span class="token punctuation">.</span><span class="token function">runOnlyPendingTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// At this point, our 1-second timer should have fired its callback</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// And it should have created a new timer to start the game over in</span>
    <span class="token comment">// 10 seconds</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="temporizadores-de-avance-por-tiempo" tabindex="-1">Temporizadores de avance por tiempo <a class="header-anchor" href="#temporizadores-de-avance-por-tiempo" aria-hidden="true">#</a></h2><p>Otra posibilidad es usar <code>vi.advanceTimersByTime(msToRun)</code>. Cuando se llama a esta API, todos los temporizadores avanzan <code>msToRun</code> milisegundos. Se ejecutar\xE1n todas las &quot;macrotareas&quot; pendientes que se hayan puesto en cola a trav\xE9s de <code>setTimeout()</code> o <code>setInterval()</code>, y que se ejecutar\xEDan durante este per\xEDodo de tiempo. Adem\xE1s, si esas macrotareas programan nuevas macrotareas que se ejecutar\xEDan en el mismo per\xEDodo de tiempo, se ejecutar\xE1n hasta que no queden m\xE1s macrotareas en la cola que deban ejecutarse en <code>msToRun</code> milisegundos.</p><div class="language-js"><pre><code><span class="token comment">// timerGame</span>
<span class="token keyword">const</span> <span class="token function-variable function">timerGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready....go!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Time&#39;s up -- stop!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> timerGame<span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token comment">// timerGame.spec.js</span>
<span class="token keyword">import</span> timerGame <span class="token keyword">from</span> <span class="token string">&#39;@/timerGame&#39;</span><span class="token punctuation">;</span>

vi<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;calls the callback after 1 second via advanceTimersByTime&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
  <span class="token keyword">const</span> callback <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">timerGame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// At this point in time, the callback should not have been called yet</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Fast-forward until all timers have been executed</span>
  vi<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Now our callback should have been called!</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Por \xFAltimo, ocasionalmente puede ser \xFAtil en algunas pruebas poder borrar todos los temporizadores pendientes. Para esto, tenemos <code>vi.clearAllTimers()</code>.</p><h2 id="falsificacion-selectiva" tabindex="-1">Falsificaci\xF3n Selectiva <a class="header-anchor" href="#falsificacion-selectiva" aria-hidden="true">#</a></h2><p>A veces, su c\xF3digo puede requerir evitar sobrescribir la implementaci\xF3n original de una u otra API. Si ese es el caso, puede usar la opci\xF3n <code>doNotFake</code>. Por ejemplo, as\xED es como podr\xEDa proporcionar una funci\xF3n simulada personalizada para <code>performance.mark()</code> en el entorno jsdom:</p><div class="language-js"><pre><code><span class="token comment">/**
 * @vitest-environment jsdom
 */</span>
 
<span class="token comment">// redefining readonly property of the performance object</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>performance<span class="token punctuation">,</span> <span class="token string">&quot;mark&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mockPerformanceMark <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>mark <span class="token operator">=</span> mockPerformanceMark<span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;allows mocking \`performance.mark()\`&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  vi<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">doNotFake</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;performance&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>mark<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>mockPerformanceMark<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,23),o=[e];function c(u,l,i,k,r,d){return s(),a("div",null,o)}var v=n(p,[["render",c]]);export{f as __pageData,v as default};
