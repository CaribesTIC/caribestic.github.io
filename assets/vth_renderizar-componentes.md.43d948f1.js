import{_ as n,c as a,o as s,a as t}from"./app.74b39d42.js";const g='{"title":"Renderizar Componentes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Dos formas de renderizar","slug":"dos-formas-de-renderizar"}],"relativePath":"vth/renderizar-componentes.md"}',e={},o=t(`<h1 id="renderizar-componentes" tabindex="-1">Renderizar Componentes <a class="header-anchor" href="#renderizar-componentes" aria-hidden="true">#</a></h1><h2 id="dos-formas-de-renderizar" tabindex="-1">Dos formas de renderizar <a class="header-anchor" href="#dos-formas-de-renderizar" aria-hidden="true">#</a></h2><p><code>vue-test-utils</code> proporciona dos formas de representar o <strong>montar</strong> un componente: <code>mount</code> y <code>shallowMount</code>. Un componente montado con cualquiera de estos m\xE9todos devuelve un <code>wrapper</code>, que es un objeto que contiene el componente Vue, adem\xE1s de algunos m\xE9todos \xFAtiles para realizar pruebas.</p><p>Comencemos con dos componentes simples:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Child&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;Child component&lt;/div&gt;&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Parent&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;&lt;child /&gt;&lt;/div&gt;&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Comencemos representando <code>Child</code> y llamando al m\xE9todo <code>html</code> que proporciona <code>vue-test-utils</code> para inspeccionar el marcado.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> shallowMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>

<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// omitted for brevity ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// omitted for brevity ...</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;stubs component with custom template&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> shallowWrapper <span class="token operator">=</span> <span class="token function">shallowMount</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span>
  <span class="token keyword">const</span> mountWrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowWrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mountWrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Tanto <code>mountWrapper.html()</code> como <code>shallowWrapper.html()</code> producen el siguiente resultado:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Child component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>No hay diferencia aqu\xED. \xBFQu\xE9 tal con <code>Parent</code>?</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;stubs component with custom template&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> shallowWrapper <span class="token operator">=</span> <span class="token function">shallowMount</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span>
  <span class="token keyword">const</span> mountWrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowWrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mountWrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><code>mountWrapper.html()</code> ahora produce:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Child component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Que es el marcado completamente renderizado de <code>Parent</code> y <code>Child</code>. <code>shallowWrapper.html()</code>, por otro lado, produce esto:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-stub</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-stub</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>El lugar donde deber\xEDa estar <code>&lt;Child /&gt;</code> ha sido reemplazado por <code>&lt;child-stub /&gt;</code>. <code>shallowWrapper</code> representa elementos html normales, pero reemplaza los componentes de Vue con un <em>stub</em>.</p><blockquote><p>Un <em>stub</em> es una especie de objeto &quot;fake&quot; que sustituye a uno real.</p></blockquote><p>Esto puede ser \xFAtil. Imagina que quieres probar tu componente <code>App.vue</code>, que se ve as\xED:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My Vue App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fetch-data</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Y queremos probar que <code>&lt;h1&gt;My Vue App&lt;/h1&gt;</code> se representa correctamente. Tambi\xE9n tenemos un componente <code>&lt;fetch-data&gt;</code>, que realiza una solicitud a una API externa en su enlace de ciclo de vida <code>mounted</code>.</p><p>Si usamos <code>mount</code>, aunque todo lo que queremos hacer es asegurar que se represente alg\xFAn texto, <code>&lt;fetch-data /&gt;</code> realizar\xE1 una solicitud de API. Esto har\xE1 que nuestra prueba sea lenta y propensa a fallar. Entonces, eliminamos las dependencias externas. Al usar <code>shallowMount</code>, <code>&lt;fetch-data /&gt;</code> se reemplazar\xE1 con un <code>&lt;fetch-data-stub /&gt;</code> y no se iniciar\xE1 la llamada a la API.</p><p>Como regla general, debe intentar usar <code>mount</code>, ya que se parecer\xE1 m\xE1s a sus componentes y c\xF3mo aparecer\xE1n en un entorno real. Dicho esto, si tiene problemas con la activaci\xF3n de muchas solicitudes de API o con el suministro de las dependencias necesarias para representar su componente, puede usar <code>shallowMount</code>.</p>`,22),p=[o];function c(l,u,r,i,d,k){return s(),a("div",null,p)}var h=n(e,[["render",c]]);export{g as __pageData,h as default};
