import{_ as a,c as n,o as s,a as t}from"./app.9b0c39a4.js";const g='{"title":"Vuex Mutaciones","description":"","frontmatter":{},"headers":[{"level":2,"title":"Probando Mutaciones","slug":"probando-mutaciones"},{"level":2,"title":"Creando la Mutaci\xF3n","slug":"creando-la-mutacion"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vth/vuex-mutaciones.md"}',e={},o=t(`<h1 id="vuex-mutaciones" tabindex="-1">Vuex Mutaciones <a class="header-anchor" href="#vuex-mutaciones" aria-hidden="true">#</a></h1><h2 id="probando-mutaciones" tabindex="-1">Probando Mutaciones <a class="header-anchor" href="#probando-mutaciones" aria-hidden="true">#</a></h2><p>Probar mutaciones de forma aislada es muy sencillo, porque las mutaciones son solo funciones regulares de JavaScript. Esta p\xE1gina analiza las pruebas de mutaciones de forma aislada. Si desea probar mutaciones en el contexto de un componente que comete una mutaci\xF3n, consulte <a href="./../vth/probando-vuex-en-componentes-mutaciones-y-acciones.html">aqu\xED</a>.</p><p>La prueba utilizada en el siguiente ejemplo se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app/tests/unit/mutations.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><h2 id="creando-la-mutacion" tabindex="-1">Creando la Mutaci\xF3n <a class="header-anchor" href="#creando-la-mutacion" aria-hidden="true">#</a></h2><p>Las mutaciones tienden a seguir un patr\xF3n establecido. Obtenga algunos datos, tal vez haga alg\xFAn procesamiento, luego asigne los datos al estado. Aqu\xED est\xE1 el esquema de una mutaci\xF3n <code>ADD_POST</code>. Una vez implementado, recibir\xE1 un objeto <code>post</code> en la carga \xFAtil y agregar\xE1 <code>post.id</code> a <code>state.postIds</code>. Tambi\xE9n agregar\xE1 el objeto de publicaci\xF3n al objeto <code>state.posts</code>, donde la clave es <code>post.id</code>. Este es un patr\xF3n com\xFAn en las aplicaciones que usan Vuex.</p><p>Lo desarrollaremos usando TDD. El comienzo de la mutaci\xF3n es el siguiente:</p><div class="language-js"><pre><code><span class="token comment">// store/mutations.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token constant">SET_POST</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Escribamos la prueba y dejemos que los mensajes de error gu\xEDen nuestro desarrollo:</p><div class="language-js"><pre><code><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">&quot;@/store/mutations.js&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;SET_POST&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;adds a post to the state&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Post&quot;</span> <span class="token punctuation">}</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">postIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">posts</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    mutations<span class="token punctuation">.</span><span class="token constant">SET_POST</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">postIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">posts</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;1&quot;</span><span class="token operator">:</span> post <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ejecutar esta prueba genera el siguiente mensaje de error:</p><div class="language-"><pre><code>FAIL  tests/unit/mutations.spec.js
\u25CF SET_POST \u203A adds a post to the state

  expect(received).toEqual(expected)

  Expected value to equal:
    {&quot;postIds&quot;: [1], &quot;posts&quot;: {&quot;1&quot;: {&quot;id&quot;: 1, &quot;title&quot;: &quot;Post&quot;}}}
  Received:
    {&quot;postIds&quot;: [], &quot;posts&quot;: {}}
</code></pre></div><p>Comencemos agregando <code>post.id</code> a <code>state.postIds</code>:</p><div class="language-js"><pre><code><span class="token comment">// store/mutations.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token constant">SET_POST</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>postIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Ahora la prueba produce:</p><div class="language-"><pre><code>Expected value to equal:
  {&quot;postIds&quot;: [1], &quot;posts&quot;: {&quot;1&quot;: {&quot;id&quot;: 1, &quot;title&quot;: &quot;Post&quot;}}}
Received:
  {&quot;postIds&quot;: [1], &quot;posts&quot;: {}}
</code></pre></div><p><code>postIds</code> se ve bien. Ahora solo necesitamos agregar la publicaci\xF3n a <code>state.posts</code>. Debido a c\xF3mo funciona el sistema de reactividad de Vue, no podemos simplemente escribir <code>post[post.id] = post</code> para agregar la publicaci\xF3n. M\xE1s detalles se pueden encontrar <a href="https://vuejs.org/guide/extras/reactivity-in-depth.html" target="_blank" rel="noopener noreferrer">aqu\xED</a>. B\xE1sicamente, necesita crear un nuevo objeto usando <code>Object.assign</code> o el operador <code>...</code>. Usaremos el operador <code>...</code> para asignar la publicaci\xF3n a <code>state.posts</code>:</p><div class="language-js"><pre><code><span class="token comment">// store/mutations.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token constant">SET_POST</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>postIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>posts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>posts<span class="token punctuation">,</span> <span class="token punctuation">[</span>post<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">:</span> post <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\xA1Ahora pasa la prueba!</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>Probar las mutaciones de Vuex no requiere nada espec\xEDfico de Vue o Vuex, ya que son solo funciones regulares de JavaScript. Simplemente imp\xF3rtelos y pru\xE9belos seg\xFAn sea necesario. Lo \xFAnico que debe tener cuidado son las advertencias de reactividad de Vue, que tambi\xE9n se aplican a Vuex. Puede leer m\xE1s sobre el sistema de reactividad y las advertencias comunes <a href="https://vuejs.org/guide/extras/reactivity-in-depth.html" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><p>La p\xE1gina discutida:</p><ul><li>Las mutaciones de Vuex son funciones regulares de JavaScript</li><li>Las mutaciones pueden, y deben, probarse de forma aislada de la aplicaci\xF3n principal de Vue</li></ul><p>La prueba utilizada en el ejemplo anterior se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app/tests/unit/mutations.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p>`,24),p=[o];function c(u,i,l,r,d,k){return s(),n("div",null,p)}var q=a(e,[["render",c]]);export{g as __pageData,q as default};
