import{_ as a,c as n,o as s,a as t}from"./app.2425fff2.js";const g='{"title":"Un Curso Acelerado","description":"","frontmatter":{},"headers":[{"level":2,"title":"Empezando","slug":"empezando"},{"level":2,"title":"La primera prueba - se procesa una tarea pendiente","slug":"la-primera-prueba-se-procesa-una-tarea-pendiente"},{"level":2,"title":"Haciendo pasar la prueba","slug":"haciendo-pasar-la-prueba"},{"level":2,"title":"A\xF1adir una nueva tarea pendiente","slug":"anadir-una-nueva-tarea-pendiente"},{"level":2,"title":"Completando un todo","slug":"completando-un-todo"},{"level":2,"title":"Arreglar, Actuar, Afirmar","slug":"arreglar-actuar-afirmar"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vtu/esencial/un-curso-acelerado.md"}',e={},p=t(`<h1 id="un-curso-acelerado" tabindex="-1">Un Curso Acelerado <a class="header-anchor" href="#un-curso-acelerado" aria-hidden="true">#</a></h1><p>\xA1Vamos a saltar directamente a eso! Aprendamos Vue Test Utils (VTU) creando una aplicaci\xF3n Todo simple y escribiendo pruebas sobre la marcha. Esta gu\xEDa cubrir\xE1 c\xF3mo:</p><ul><li>Componentes de montaje</li><li>Buscar elementos</li><li>Llenar formularios</li><li>Activar eventos</li></ul><h2 id="empezando" tabindex="-1">Empezando <a class="header-anchor" href="#empezando" aria-hidden="true">#</a></h2><p>Comenzaremos con un componente <code>TodoApp</code> simple con una sola tarea pendiente:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;TodoApp&#39;</span><span class="token punctuation">,</span>

  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Learn Vue.js 3&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="la-primera-prueba-se-procesa-una-tarea-pendiente" tabindex="-1">La primera prueba - se procesa una tarea pendiente <a class="header-anchor" href="#la-primera-prueba-se-procesa-una-tarea-pendiente" aria-hidden="true">#</a></h2><p>La primera prueba que escribiremos verifica que se renderice una tarea pendiente. Veamos primero la prueba, luego analicemos cada parte:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> TodoApp <span class="token keyword">from</span> <span class="token string">&#39;@/TodoApp.vue&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;renders a todo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>TodoApp<span class="token punctuation">)</span>

  <span class="token keyword">const</span> todo <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;todo&quot;]&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Learn Vue.js 3&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Comenzamos importando el montaje: esta es la forma principal de representar un componente en VTU. Declara una prueba utilizando la funci\xF3n de prueba con una breve descripci\xF3n de la prueba. Las funciones <code>test</code> y <code>expect</code> est\xE1n disponibles globalmente en la mayor\xEDa de los ejecutores de pruebas (este ejemplo usa <a href="https://vitest.dev/" target="_blank" rel="noopener noreferrer">Vitest</a>). Si <code>test</code> y <code>expect</code> parece confuso, <a href="./../../comenzar/tdd.html">aqu\xED</a> encontraras lo que debes conocer antes de probar componentes de Vue.</p><p>A continuaci\xF3n, llamamos a <code>mount</code> y pasamos el componente como primer argumento; esto es algo que casi todas las pruebas (de componentes Vue) que escribas har\xE1n. Por convenci\xF3n, asignamos el resultado a una variable llamada <code>wrapper</code>, ya que <code>mount</code> proporciona un &quot;envoltorio&quot; simple alrededor de la aplicaci\xF3n con algunos m\xE9todos convenientes para realizar pruebas.</p><p>Finalmente, usamos otra funci\xF3n global com\xFAn a muchos ejecutores de pruebas - incluido Vitest - <code>expect</code>. La idea es que estamos afirmando, o <em>esperando</em>, que el resultado real coincida con lo que creemos que deber\xEDa ser. En este caso, estamos encontrando un elemento con el selector <code>data-test=&quot;todo&quot;</code> - en el DOM, se ver\xE1 como <code>&lt;div data-test=&quot;todo&quot;&gt;...&lt;/div&gt;</code>. Luego llamamos al m\xE9todo <code>text</code> para obtener el contenido, que esperamos sea <code>&#39;Learn Vue.js 3&#39;</code>.</p><blockquote><p>No es requerido usar selectores de <code>data-test</code>, pero puede hacer que sus pruebas sean menos fr\xE1giles. Las clases y los identificadores tienden a cambiar o moverse a medida que crece la aplicaci\xF3n - al usar <code>data-test</code>, queda claro para otros desarrolladores qu\xE9 elementos se usan en las pruebas y no deben cambiarse.</p></blockquote><h2 id="haciendo-pasar-la-prueba" tabindex="-1">Haciendo pasar la prueba <a class="header-anchor" href="#haciendo-pasar-la-prueba" aria-hidden="true">#</a></h2><p>Si ejecutamos esta prueba ahora, falla con el siguiente mensaje de error: <code>Unable to get [data-test=&quot;todo&quot;]</code>. Esto se debe a que no estamos procesando ning\xFAn elemento pendiente, por lo que la llamada <code>get()</code> no puede devolver un contenedor (recuerde, VTU envuelve todos los componentes y elementos DOM en un &quot;envoltorio&quot; con algunos m\xE9todos convenientes). Actualicemos <code>&lt;template&gt;</code> en <code>TodoApp.vue</code> para renderizar el arreglo <code>todos</code>:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo in todos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo.id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      {{ todo.text }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Con este cambio, la prueba est\xE1 pasando. \xA1Felicidades! Escribiste tu primera prueba de componentes.</p><h2 id="anadir-una-nueva-tarea-pendiente" tabindex="-1">A\xF1adir una nueva tarea pendiente <a class="header-anchor" href="#anadir-una-nueva-tarea-pendiente" aria-hidden="true">#</a></h2><p>La siguiente funci\xF3n que agregaremos es que el usuario pueda crear una nueva tarea pendiente. Para hacerlo, necesitamos un formulario con una entrada para que el usuario escriba alg\xFAn texto. Cuando el usuario env\xEDa el formulario, esperamos que se muestre el nuevo todo. Echemos un vistazo a la prueba:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> TodoApp <span class="token keyword">from</span> <span class="token string">&#39;@/TodoApp.vue&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;creates a todo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>TodoApp<span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;new-todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&#39;New todo&#39;</span><span class="token punctuation">)</span>
  wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;form&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Como de costumbre, comenzamos usando <code>mount</code> para representar el elemento. Tambi\xE9n estamos afirmando que solo se procesa 1 tarea pendiente; esto deja en claro que estamos agregando una tarea pendiente adicional, como sugiere la l\xEDnea final de la prueba.</p><p>Para actualizar <code>&lt;input&gt;</code>, usamos <code>setValue</code> - esto nos permite establecer el valor de la entrada.</p><p>Despu\xE9s de actualizar <code>&lt;input&gt;</code>, usamos el m\xE9todo <code>trigger</code> para simular al usuario que env\xEDa el formulario. Finalmente, afirmamos que el n\xFAmero de tareas ha aumentado de 1 a 2.</p><p>Si ejecutamos esta prueba, obviamente fallar\xE1. Actualicemos <code>TodoApp.vue</code> para que tenga los elementos <code>&lt;form&gt;</code> y <code>&lt;input&gt;</code> y pasemos la prueba:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo in todos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo.id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      {{ todo.text }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createTodo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>new-todo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newTodo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;TodoApp&#39;</span><span class="token punctuation">,</span>

  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">newTodo</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Learn Vue.js 3&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">createTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newTodo<span class="token punctuation">,</span>
        <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><p>Estamos usando <code>v-model</code> para vincular a <code>&lt;input&gt;</code> y <code>@submit</code> para escuchar el env\xEDo del formulario. Cuando se env\xEDa el formulario, se llama a <code>createTodo</code> e inserta un nuevo todo en el arreglo <code>todos</code>.</p><p>Si bien esto se ve bien, la ejecuci\xF3n de la prueba muestra un error:</p><div class="language-"><pre><code>expect(received).toHaveLength(expected)

    Expected length: 2
    Received length: 1
    Received array:  [{&quot;element&quot;: &lt;div data-test=&quot;todo&quot;&gt;Learn Vue.js 3&lt;/div&gt;}]

</code></pre></div><p>El n\xFAmero de todos no ha aumentado. El problema es que Jest ejecuta las pruebas de manera s\xEDncrona, finalizando la prueba tan pronto como se llama a la funci\xF3n final. Vue, sin embargo, actualiza el DOM de forma as\xEDncrona. Necesitamos marcar la prueba <code>async</code> y llamar a <code>await</code> en cualquier m\xE9todo que pueda causar que el DOM cambie. <code>trigger</code> es uno de esos m\xE9todos, al igual que <code>setValue</code>: simplemente podemos anteponer <code>await</code> y la prueba deber\xEDa funcionar como se esperaba:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> TodoApp <span class="token keyword">from</span> <span class="token string">&#39;./TodoApp.vue&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;creates a todo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>TodoApp<span class="token punctuation">)</span>

  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;new-todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&#39;New todo&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;form&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\xA1Ahora la prueba finalmente est\xE1 pasando!</p><h2 id="completando-un-todo" tabindex="-1">Completando un todo <a class="header-anchor" href="#completando-un-todo" aria-hidden="true">#</a></h2><p>Ahora que podemos crear tareas pendientes, d\xE9mosle al usuario la capacidad de marcar un elemento de tareas pendientes como completado/incompleto con una casilla de verificaci\xF3n. Como anteriormente, comencemos con la prueba fallida:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;completes a todo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>TodoApp<span class="token punctuation">)</span>

  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;todo-checkbox&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;completed&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Esta prueba es similar a las dos anteriores; encontramos un elemento e interactuamos con \xE9l de la misma manera (usamos <code>setValue</code> nuevamente, ya que estamos interactuando con un <code>&lt;input&gt;</code>).</p><p>Por \xFAltimo, hacemos una afirmaci\xF3n. Aplicaremos una clase <code>completed</code> a todos completados - luego podemos usar esto para agregar algo de estilo para indicar visualmente el estado de un todo.</p><p>Podemos hacer que pase esta prueba actualizando <code>&lt;template&gt;</code> para incluir <code>&lt;input type=&quot;checkbox&quot;&gt;</code> y un enlace de clase en el elemento todo:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo in todos<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo.id<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[todo.completed ? <span class="token punctuation">&#39;</span>completed<span class="token punctuation">&#39;</span> : <span class="token punctuation">&#39;</span><span class="token punctuation">&#39;</span>]<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>
      {{ todo.text }}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo.completed<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo-checkbox<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createTodo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">data-test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>new-todo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newTodo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\xA1Felicidades! Escribiste tus primeras pruebas de componentes.</p><h2 id="arreglar-actuar-afirmar" tabindex="-1">Arreglar, Actuar, Afirmar <a class="header-anchor" href="#arreglar-actuar-afirmar" aria-hidden="true">#</a></h2><p>Es posible que haya notado algunas l\xEDneas nuevas entre el c\xF3digo en cada una de las pruebas. Veamos la segunda prueba nuevamente, en detalle:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> TodoApp <span class="token keyword">from</span> <span class="token string">&#39;./TodoApp.vue&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;creates a todo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>TodoApp<span class="token punctuation">)</span>

  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;new-todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&#39;New todo&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;form&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-test=&quot;todo&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>La prueba se divide en tres etapas distintas, separadas por nuevas l\xEDneas. Las tres etapas representan las tres fases de una prueba: <code>arreglar</code>, <code>actuar</code> y <code>afirmar</code>.</p><p>En la fase de <em>arreglar</em>, estamos configurando el escenario para la prueba. Un ejemplo m\xE1s complejo puede requerir la creaci\xF3n de una tienda Vuex o el llenado de una base de datos.</p><p>En la fase de <em>actuaci\xF3n</em>, representamos el escenario, simulando c\xF3mo un usuario interactuar\xEDa con el componente o la aplicaci\xF3n.</p><p>En la fase de <em>afirmaci\xF3n</em>, hacemos afirmaciones sobre c\xF3mo esperamos que sea el estado actual del componente.</p><p>Casi todas las pruebas seguir\xE1n estas tres fases. No necesita separarlos con nuevas l\xEDneas como lo hace esta gu\xEDa, pero es bueno tener en cuenta estas tres fases al escribir sus pruebas.</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><ul><li>Use <code>mount()</code> para renderizar un componente.</li><li>Utilice <code>get()</code> y <code>findAll()</code> para consultar el DOM.</li><li><code>trigger()</code> y <code>setValue()</code> son ayudantes para simular la entrada del usuario.</li><li>Actualizar el DOM es una operaci\xF3n as\xEDncrona, as\xED que aseg\xFArese de usar <code>async</code> y <code>await</code>.</li><li>Las pruebas suelen constar de 3 fases; arreglar, actuar y afirmar.</li></ul>`,49),o=[p];function c(u,l,r,i,k,d){return s(),n("div",null,o)}var q=a(e,[["render",c]]);export{g as __pageData,q as default};
