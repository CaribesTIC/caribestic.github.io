import{_ as a,c as n,o as s,a as o}from"./app.bbdf5da0.js";const m='{"title":"Vuex Captadores","description":"","frontmatter":{},"headers":[{"level":2,"title":"Probando Captadores","slug":"probando-captadores"},{"level":2,"title":"Creando los Captadores","slug":"creando-los-captadores"},{"level":2,"title":"Escribiendo las Pruebas","slug":"escribiendo-las-pruebas"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vth/vuex-captadores.md"}',t={},p=o(`<h1 id="vuex-captadores" tabindex="-1">Vuex Captadores <a class="header-anchor" href="#vuex-captadores" aria-hidden="true">#</a></h1><h2 id="probando-captadores" tabindex="-1">Probando Captadores <a class="header-anchor" href="#probando-captadores" aria-hidden="true">#</a></h2><p>Probar captadores de forma aislada es sencillo, ya que b\xE1sicamente son solo funciones de JavaScript. Las t\xE9cnicas son similares a las pruebas de mutaciones y acciones, m\xE1s informaci\xF3n <a href="./../vth/vuex-mutaciones.html">aqu\xED</a>.</p><p>El c\xF3digo fuente de la prueba descrita en esta p\xE1gina se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/getters.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><p>Veremos dos captadores, que operan en una tienda que se ve as\xED:</p><div class="language-js"><pre><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dogs</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lucky&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">breed</span><span class="token operator">:</span> <span class="token string">&quot;poodle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;pochy&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">breed</span><span class="token operator">:</span> <span class="token string">&quot;dalmatian&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;blackie&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">breed</span><span class="token operator">:</span> <span class="token string">&quot;poodle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Los captadores que probaremos son:</p><ol><li><code>poodles</code>: obtiene todos los <code>poodles</code></li><li><code>poodlesByAge</code>: obtiene todos los <code>poodles</code> y acepta un argumento <code>age</code></li></ol><h2 id="creando-los-captadores" tabindex="-1">Creando los Captadores <a class="header-anchor" href="#creando-los-captadores" aria-hidden="true">#</a></h2><p>Primero, vamos a crear los captadores.</p><div class="language-js"><pre><code><span class="token comment">// store/getters.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">poodles</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">dog</span> <span class="token operator">=&gt;</span> dog<span class="token punctuation">.</span>breed <span class="token operator">===</span> <span class="token string">&quot;poodle&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">poodlesByAge</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> getters<span class="token punctuation">.</span>poodles<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">dog</span> <span class="token operator">=&gt;</span> dog<span class="token punctuation">.</span>age <span class="token operator">===</span> age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Nada demasiado emocionante: recuerde que los captadores reciben a otros captadores como segundo argumento. Como ya tenemos un captador <code>poodles</code>, podemos usarlo en <code>poodlesByAge</code>. Al devolver una funci\xF3n en <code>poodlesByAge</code> que toma un argumento, podemos pasar argumentos a captadores. El captador <code>poodlesByAge</code> se puede usar as\xED:</p><div class="language-js"><pre><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">puppies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">poodlesByAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Comencemos con una prueba para <code>poodles</code>.</p><h2 id="escribiendo-las-pruebas" tabindex="-1">Escribiendo las Pruebas <a class="header-anchor" href="#escribiendo-las-pruebas" aria-hidden="true">#</a></h2><p>Dado que un captador es solo una funci\xF3n de JavaScript que toma un objeto <code>state</code> como primer argumento, la prueba es muy simple. Escribir\xE9 mi prueba en un archivo <code>getters.spec.js</code>, con el siguiente c\xF3digo:</p><div class="language-js"><pre><code><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">&quot;@/store/getters.js&quot;</span>

<span class="token keyword">const</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lucky&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">breed</span><span class="token operator">:</span> <span class="token string">&quot;poodle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;pochy&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">breed</span><span class="token operator">:</span> <span class="token string">&quot;dalmatian&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;blackie&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">breed</span><span class="token operator">:</span> <span class="token string">&quot;poodle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span> dogs <span class="token punctuation">}</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;poodles&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;returns poodles&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> actual <span class="token operator">=</span> getters<span class="token punctuation">.</span><span class="token function">poodles</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span> dogs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dogs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Vuex pasa autom\xE1ticamente el <code>state</code> al captador. Dado que estamos probando los captadores de forma aislada, tenemos que pasar manualmente el <code>state</code>. Aparte de eso, solo estamos probando una funci\xF3n JavaScript normal.</p><p><code>poodlesByAge</code> es un poco m\xE1s interesante. El segundo argumento para un captador son otros <code>getters</code>. Estamos probando <code>poodlesByAge</code>, por lo que no queremos involucrarnos en la implementaci\xF3n de <code>poodles</code>. En su lugar, podemos talonar <code>getters.poodles</code>. Esto nos dar\xE1 un control m\xE1s detallado sobre la prueba.</p><div class="language-js"><pre><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;poodlesByAge&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;returns poodles by age&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> poodles <span class="token operator">=</span> <span class="token punctuation">[</span> dogs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dogs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>
    <span class="token keyword">const</span> actual <span class="token operator">=</span> getters<span class="token punctuation">.</span><span class="token function">poodlesByAge</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> poodles <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span> dogs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>En lugar de pasar realmente el captador de <code>poodles</code> real, pasamos el resultado que devolver\xEDa. Ya sabemos que est\xE1 funcionando, ya que escribimos una prueba para ello. Esto nos permite centrarnos en probar la l\xF3gica exclusiva de <code>poodlesByAge</code>.</p><p>Es posible tener captadores <code>async</code>. Se pueden probar con la misma t\xE9cnica que las acciones <code>async</code>, sobre las que puede leer <a href="./../vth/vuex-acciones.html">aqu\xED</a>.</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><ul><li>Los <code>getters</code> son simplemente funciones de JavaScript.</li><li>Al probar <code>getters</code> de forma aislada, debe pasar el estado manualmente.</li><li>Si un captador usa otro captador, debe agregar el resultado de retorno esperado del primer captador. Esto le dar\xE1 un control m\xE1s detallado sobre la prueba y le permitir\xE1 concentrarse en probar el captador en cuesti\xF3n.</li></ul><p>El c\xF3digo fuente de la prueba descrita en esta p\xE1gina se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/getters.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p>`,25),e=[p];function c(r,l,u,i,d,k){return s(),n("div",null,e)}var b=a(t,[["render",c]]);export{m as __pageData,b as default};
