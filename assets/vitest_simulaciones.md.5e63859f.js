import{_ as n,c as s,o as a,a as t}from"./app.6d5336e7.js";const f='{"title":"Simulaciones","description":"","frontmatter":{},"headers":[{"level":2,"title":"Fechas","slug":"fechas"},{"level":2,"title":"Funciones","slug":"funciones"},{"level":2,"title":"Globales","slug":"globales"},{"level":2,"title":"M\xF3dulos","slug":"modulos"},{"level":2,"title":"Algoritmo de simulaci\xF3n autom\xE1tica","slug":"algoritmo-de-simulacion-automatica"},{"level":2,"title":"Peticiones","slug":"peticiones"},{"level":2,"title":"Configuraci\xF3n","slug":"configuracion"},{"level":2,"title":"Temporizadores","slug":"temporizadores"}],"relativePath":"vitest/simulaciones.md"}',p={},o=t(`<h1 id="simulaciones" tabindex="-1">Simulaciones <a class="header-anchor" href="#simulaciones" aria-hidden="true">#</a></h1><p>Al escribir pruebas, es solo cuesti\xF3n de tiempo antes de que necesite crear una versi\xF3n &quot;falsa&quot; de un servicio interno o externo. Esto se conoce com\xFAnmente como simulaci\xF3n. Vitest proporciona funciones de utilidad para ayudarlo a trav\xE9s de su ayudante <strong>vi</strong>. Puede usar <code>import { vi } from &#39;vitest&#39;</code> o acceder a \xE9l globalmente (cuando la <a href="https://vitest.dev/config/#globals" target="_blank" rel="noopener noreferrer">configuraci\xF3n global</a> est\xE1 habilitada).</p><div class="warning custom-block"><p class="custom-block-title">ADVERTENCIA</p><p>\xA1Recuerde siempre borrar o restaurar los simulacros antes o despu\xE9s de cada ejecuci\xF3n de prueba para deshacer los cambios de estado simulados entre ejecuciones! Consulte los documentos de <a href="https://vitest.dev/api/#mockreset" target="_blank" rel="noopener noreferrer">mockReset</a> para obtener m\xE1s informaci\xF3n.</p></div><p>Si quiere sumergirse de cabeza primero, consulte la <a href="https://vitest.dev/api/#vi" target="_blank" rel="noopener noreferrer">secci\xF3n API</a>, de lo contrario, siga leyendo para sumergirse m\xE1s profundamente en el mundo de la simulaci\xF3n.</p><h2 id="fechas" tabindex="-1">Fechas <a class="header-anchor" href="#fechas" aria-hidden="true">#</a></h2><p>A veces es necesario tener el control de la fecha para garantizar la coherencia al realizar las pruebas. Vitest usa el paquete <a href="https://github.com/sinonjs/fake-timers" target="_blank" rel="noopener noreferrer"><code>@sinonjs/fake-timers</code></a> para manipular los temporizadores, as\xED como la fecha del sistema. Puede encontrar m\xE1s informaci\xF3n detallada sobre la API espec\xEDfica <a href="https://vitest.dev/api/#vi-setsystemtime" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><p><strong>Ejemplo</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> afterEach<span class="token punctuation">,</span> beforeEach<span class="token punctuation">,</span> describe<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> it<span class="token punctuation">,</span> vi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>

<span class="token keyword">const</span> businessHours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">purchase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> currentHour <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>open<span class="token punctuation">,</span> close<span class="token punctuation">]</span> <span class="token operator">=</span> businessHours

  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentHour <span class="token operator">&gt;</span> open <span class="token operator">&amp;&amp;</span> currentHour <span class="token operator">&lt;</span> close<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Success&#39;</span> <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Error&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;purchasing flow&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// tell vitest we use mocked time</span>
    vi<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// restoring date after each test run</span>
    vi<span class="token punctuation">.</span><span class="token function">useRealTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;allows purchases within business hours&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// set hour within business hours</span>
    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>
    vi<span class="token punctuation">.</span><span class="token function">setSystemTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>

    <span class="token comment">// access Date.now() will result in the date set above</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Success&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;disallows purchases outside of business hours&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// set hour outside business hours</span>
    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
    vi<span class="token punctuation">.</span><span class="token function">setSystemTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>

    <span class="token comment">// access Date.now() will result in the date set above</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Error&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="funciones" tabindex="-1">Funciones <a class="header-anchor" href="#funciones" aria-hidden="true">#</a></h2><p>Las funciones de simulaci\xF3n se pueden dividir en dos categor\xEDas diferentes: espiar y burlarse.</p><blockquote><p><em>spying &amp; mocking</em></p></blockquote><p>A veces, todo lo que necesita es validar si se ha llamado o no a una funci\xF3n espec\xEDfica (y posiblemente qu\xE9 argumentos se pasaron). En estos casos, todo lo que necesitamos es un esp\xEDa que puede usar directamente con <code>vi.spyOn()</code> (<a href="https://vitest.dev/api/#vi-spyon" target="_blank" rel="noopener noreferrer">lea m\xE1s aqu\xED</a>).</p><p>Sin embargo, los esp\xEDas solo pueden ayudarlo a espiar funciones, no pueden alterar la implementaci\xF3n de esas funciones. En el caso de que necesitemos crear una versi\xF3n falsa (o simulada) de una funci\xF3n, podemos usar <code>vi.fn()</code> (<a href="https://vitest.dev/api/#vi-fn" target="_blank" rel="noopener noreferrer">lea m\xE1s aqu\xED</a>).</p><p>Usamos <a href="https://github.com/tinylibs/tinyspy" target="_blank" rel="noopener noreferrer">Tinyspy</a> como base para las funciones de simulaci\xF3n, pero tenemos nuestro propio envoltorio para que sea compatible con <code>jest</code>. Tanto <code>vi.fn()</code> como <code>vi.spyOn()</code> comparten los mismos m\xE9todos, sin embargo, solo se puede llamar al resultado devuelto de vi.fn().</p><p><strong>Ejemplo</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> afterEach<span class="token punctuation">,</span> describe<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> it<span class="token punctuation">,</span> vi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getLatest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index <span class="token operator">=</span> messages<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> messages<span class="token punctuation">.</span>items<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Simple test message&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;Testman&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  getLatest<span class="token punctuation">,</span> <span class="token comment">// can also be a \`getter or setter if supported\`</span>
<span class="token punctuation">}</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;reading messages&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    vi<span class="token punctuation">.</span><span class="token function">restoreAllMocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should get the latest message with a spy&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> spy <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>messages<span class="token punctuation">,</span> <span class="token string">&#39;getLatest&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token function">getMockName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;getLatest&#39;</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getLatest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>
      messages<span class="token punctuation">.</span>items<span class="token punctuation">[</span>messages<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    spy<span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;access-restricted&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getLatest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;access-restricted&#39;</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should get with a mock&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mock <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span>getLatest<span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span>items<span class="token punctuation">[</span>messages<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    mock<span class="token punctuation">.</span><span class="token function">mockImplementationOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;access-restricted&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;access-restricted&#39;</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span>items<span class="token punctuation">[</span>messages<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>M\xE1s</strong></p><ul><li><a href="https://jestjs.io/docs/mock-function-api" target="_blank" rel="noopener noreferrer">Funciones simuladas de Jest</a></li></ul><h2 id="globales" tabindex="-1">Globales <a class="header-anchor" href="#globales" aria-hidden="true">#</a></h2><p>Puede simular variables globales que no est\xE1n presentes con <code>jsdom</code> o <code>node</code> usando el ayudante <a href="https://vitest.dev/api/#vi-stubglobal" target="_blank" rel="noopener noreferrer"><code>vi.stubGlobal</code></a>. Pondr\xE1 el valor de la variable global en un objeto <code>globalThis</code>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> vi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>

<span class="token keyword">const</span> IntersectionObserverMock <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">disconnect</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">observe</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">takeRecords</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">unobserve</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

vi<span class="token punctuation">.</span><span class="token function">stubGlobal</span><span class="token punctuation">(</span><span class="token string">&#39;IntersectionObserver&#39;</span><span class="token punctuation">,</span> IntersectionObserverMock<span class="token punctuation">)</span>

<span class="token comment">// now you can access it as \`IntersectionObserver\` or \`window.IntersectionObserver\`</span>
</code></pre></div><h2 id="modulos" tabindex="-1">M\xF3dulos <a class="header-anchor" href="#modulos" aria-hidden="true">#</a></h2><p>Los m\xF3dulos simulados observan bibliotecas de terceros, que se invocan en alg\xFAn otro c\xF3digo, lo que le permite probar argumentos, producir o incluso volver a declarar su implementaci\xF3n.</p><p>Consulte la <a href="https://vitest.dev/api/#vi-mock" target="_blank" rel="noopener noreferrer"><strong>secci\xF3n api</strong> <code>vi.mock()</code></a> para obtener una descripci\xF3n m\xE1s detallada de la API.</p><h2 id="algoritmo-de-simulacion-automatica" tabindex="-1">Algoritmo de simulaci\xF3n autom\xE1tica <a class="header-anchor" href="#algoritmo-de-simulacion-automatica" aria-hidden="true">#</a></h2><p>Si su c\xF3digo est\xE1 importando un m\xF3dulo simulado, sin ning\xFAn archivo <code>__mocks__</code> asociado o f\xE1brica para este m\xF3dulo, Vitest se burlar\xE1 del m\xF3dulo invoc\xE1ndolo y burl\xE1ndose de cada exportaci\xF3n.</p><p>Los siguientes principios se aplican</p><ul><li>Todas las matrices se vaciar\xE1n</li><li>Todas las primitivas y colecciones permanecer\xE1n igual.</li><li>Todos los objetos ser\xE1n profundamente clonados.</li><li>Todas las instancias de clases y sus prototipos se clonar\xE1n profundamente.</li></ul><p><strong>Ejemplo</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> afterEach<span class="token punctuation">,</span> beforeEach<span class="token punctuation">,</span> describe<span class="token punctuation">,</span> it<span class="token punctuation">,</span> vi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pg&#39;</span>

<span class="token comment">// handlers</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// get todos</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getTodos</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...clientOptions</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM todos;&#39;</span><span class="token punctuation">)</span>

    client<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token punctuation">.</span>rowCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> item(s) returned</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> result<span class="token punctuation">.</span>rows<span class="token punctuation">,</span>
      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>

    client<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> e<span class="token punctuation">,</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

vi<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;pg&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Client</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">connect</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">query</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">end</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

vi<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;./handler.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">success</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">failure</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;get a list of todo items&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> client

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    vi<span class="token punctuation">.</span><span class="token function">clearAllMocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should return items successfully&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">mockResolvedValueOnce</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">rowCount</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> <span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM todos;&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;0 item(s) returned&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw an error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Unable to retrieve rows&#39;</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">mockRejectedValueOnce</span><span class="token punctuation">(</span>mError<span class="token punctuation">)</span>

    <span class="token keyword">await</span> <span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM todos;&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> mError<span class="token punctuation">,</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="peticiones" tabindex="-1">Peticiones <a class="header-anchor" href="#peticiones" aria-hidden="true">#</a></h2><p>Debido a que Vitest se ejecuta en Node, simular solicitudes de red es complicado; Las API web no est\xE1n disponibles, por lo que necesitamos algo que imite el comportamiento de la red para nosotros. Recomendamos <a href="https://mswjs.io/" target="_blank" rel="noopener noreferrer">Mock Service Worker</a> para lograr esto. Le permitir\xE1 burlarse de las solicitudes de red <code>REST</code> y <code>GraphQL</code>, y es independiente del marco.</p><p>Mock Service Worker (MSW) funciona al interceptar las solicitudes que realizan sus pruebas, lo que le permite usarlo sin cambiar el c\xF3digo de su aplicaci\xF3n. En el navegador, esto utiliza la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer">API de Service Worker</a>. En Node.js, y para Vitest, usa <a href="https://mswjs.io/docs/api/setup-server#operation" target="_blank" rel="noopener noreferrer">node-request-interceptor</a>. Para obtener m\xE1s informaci\xF3n sobre RSU, lea su <a href="https://mswjs.io/docs/" target="_blank" rel="noopener noreferrer">introducci\xF3n</a>.</p><h2 id="configuracion" tabindex="-1">Configuraci\xF3n <a class="header-anchor" href="#configuracion" aria-hidden="true">#</a></h2><p>Agregue lo siguiente a su archivo de <a href="https://vitest.dev/config/#setupfiles" target="_blank" rel="noopener noreferrer">configuraci\xF3n de prueba</a>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> afterAll<span class="token punctuation">,</span> afterEach<span class="token punctuation">,</span> beforeAll <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;msw/node&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> rest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;msw&#39;</span>

<span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;first post title&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;first post body&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> restHandlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  rest<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://rest-endpoint.example/path/to/posts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">res</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> graphqlHandlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  graphql<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;https://graphql-endpoint.example/api/v1/posts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">res</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">setupServer</span><span class="token punctuation">(</span><span class="token operator">...</span>restHandlers<span class="token punctuation">,</span> <span class="token operator">...</span>graphqlHandlers<span class="token punctuation">)</span>

<span class="token comment">// Start server before all tests</span>
<span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">onUnhandledRequest</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//  Close server after all tests</span>
<span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Reset handlers after each test \`important for test isolation\`</span>
<span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> server<span class="token punctuation">.</span><span class="token function">resetHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><blockquote><p>Configurar el servidor con <code>onUnhandleRequest: &#39;error&#39;</code> asegura que se arroje un error cada vez que haya una solicitud que no tenga un controlador de solicitud correspondiente.</p></blockquote><p><strong>Ejemplo</strong></p><p>Tenemos un ejemplo de trabajo completo que usa MSW: <a href="https://github.com/vitest-dev/vitest/tree/main/examples/react-testing-lib-msw" target="_blank" rel="noopener noreferrer">React Testing with MSW</a>.</p><p><strong>M\xE1s</strong></p><p>Hay mucho m\xE1s en RSU. Puede acceder a cookies y par\xE1metros de consulta, definir respuestas de error simuladas y mucho m\xE1s. Para ver todo lo que puede hacer con MSW, <a href="https://mswjs.io/docs/recipes" target="_blank" rel="noopener noreferrer">lea su documentaci\xF3n</a>.</p><h2 id="temporizadores" tabindex="-1">Temporizadores <a class="header-anchor" href="#temporizadores" aria-hidden="true">#</a></h2><p>Cada vez que probamos c\xF3digo que implica tiempos de espera o intervalos, en lugar de que nuestras pruebas esperen o se agoten. Podemos acelerar nuestras pruebas usando temporizadores &quot;falsos&quot; simulando llamadas a <code>setTimeout</code> y <code>setInterval</code> tambi\xE9n.</p><p>Consulte la <a href="https://vitest.dev/api/#vi-usefaketimer" target="_blank" rel="noopener noreferrer"><strong>secci\xF3n api</strong> <code>vi.mock()</code></a> para obtener una descripci\xF3n m\xE1s detallada de la API.</p><p><strong>Ejemplo</strong></p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> afterEach<span class="token punctuation">,</span> beforeEach<span class="token punctuation">,</span> describe<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> it<span class="token punctuation">,</span> vi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">executeAfterTwoHours</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2 hours</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">executeEveryMinute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment">// 1 minute</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> mock <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;executed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;delayed execution&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    vi<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    vi<span class="token punctuation">.</span><span class="token function">restoreAllMocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should execute the function&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">executeAfterTwoHours</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span>
    vi<span class="token punctuation">.</span><span class="token function">runAllTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should not execute the function&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">executeAfterTwoHours</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span>
    <span class="token comment">// advancing by 2ms won&#39;t trigger the func</span>
    vi<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should execute every minute&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">executeEveryMinute</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span>
    vi<span class="token punctuation">.</span><span class="token function">advanceTimersToNextTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    vi<span class="token punctuation">.</span><span class="token function">advanceTimersToNextTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,46),e=[o];function c(u,l,i,k,r,d){return a(),s("div",null,e)}var g=n(p,[["render",c]]);export{f as __pageData,g as default};
