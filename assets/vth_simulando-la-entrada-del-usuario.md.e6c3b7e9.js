import{_ as n,c as a,o as s,a as t}from"./app.8171c9f3.js";const g='{"title":"Simulando la entrada del usuario","description":"","frontmatter":{},"headers":[{"level":2,"title":"Desencadenando eventos","slug":"desencadenando-eventos"},{"level":2,"title":"Creando el componente","slug":"creando-el-componente"},{"level":2,"title":"Escribiendo la prueba","slug":"escribiendo-la-prueba"},{"level":2,"title":"Un ejemplo del mundo real","slug":"un-ejemplo-del-mundo-real"},{"level":2,"title":"Simulando una llamada ajax","slug":"simulando-una-llamada-ajax"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vth/simulando-la-entrada-del-usuario.md"}',p={},o=t(`<h1 id="simulando-la-entrada-del-usuario" tabindex="-1">Simulando la entrada del usuario <a class="header-anchor" href="#simulando-la-entrada-del-usuario" aria-hidden="true">#</a></h1><h2 id="desencadenando-eventos" tabindex="-1">Desencadenando eventos <a class="header-anchor" href="#desencadenando-eventos" aria-hidden="true">#</a></h2><p>Una de las cosas m\xE1s comunes que har\xE1n sus componentes Vue es escuchar las entradas del usuario. <code>vue-test-utils</code> y Vitest facilitan la prueba de entradas. Echemos un vistazo a c\xF3mo usar los simulacros de <code>trigger</code> y Vitest para verificar que nuestros componentes funcionan correctamente.</p><p>El c\xF3digo fuente de la prueba descrita en esta p\xE1gina se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/FormSubmitter.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a></p><h2 id="creando-el-componente" tabindex="-1">Creando el componente <a class="header-anchor" href="#creando-el-componente" aria-hidden="true">#</a></h2><p>Crearemos un componente de formulario simple, <code>&lt;FormSubmitter&gt;</code>, que contiene un <code>&lt;input&gt;</code> y un <code>&lt;button&gt;</code>. Cuando se hace click en el bot\xF3n, algo deber\xEDa suceder. El primer ejemplo simplemente revelar\xE1 un mensaje de \xE9xito, luego pasaremos a un ejemplo m\xE1s interesante que env\xEDa el formulario a un punto final externo.</p><p>Cree un <code>&lt;FormSubmitter&gt;</code> e ingrese la plantilla:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleSubmit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-username</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> 
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> 
      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submitted<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>
      Thank you for your submission, {{ username }}.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Cuando el usuario env\xEDe el formulario, mostraremos un mensaje de agradecimiento por su env\xEDo. Queremos enviar el formulario de forma asincr\xF3nica, por lo que estamos usando <code>@submit.prevent</code> para evitar la acci\xF3n predeterminada, que es actualizar la p\xE1gina cuando se env\xEDa el formulario.</p><p>Ahora agregue la l\xF3gica de env\xEDo del formulario:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;FormSubmitter&quot;</span><span class="token punctuation">,</span>

    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">submitted</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>submitted <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Bastante simple, simplemente configuramos el <code>submitted</code> como <code>true</code> cuando se env\xEDa el formulario, lo que a su vez revela el <code>&lt;div&gt;</code> que contiene el mensaje de \xE9xito.</p><h2 id="escribiendo-la-prueba" tabindex="-1">Escribiendo la prueba <a class="header-anchor" href="#escribiendo-la-prueba" aria-hidden="true">#</a></h2><p>Veamos una prueba. Estamos marcando esta prueba como <code>async</code> - siga leyendo para averiguar por qu\xE9.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>
<span class="token keyword">import</span> FormSubmitter <span class="token keyword">from</span> <span class="token string">&quot;@/components/FormSubmitter.vue&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;FormSubmitter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;reveals a notification when submitted&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>FormSubmitter<span class="token punctuation">)</span>

    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;[data-username]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;submit.prevent&quot;</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;Thank you for your submission, alice.&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Esta prueba es bastante autoexplicativa. Montamos el componente (<code>mount</code>), configuramos el <em>username</em> y usamos el m\xE9todo <code>trigger</code> que proporciona <code>vue-test-utils</code> para simular la entrada del usuario. <code>trigger</code> funciona en eventos personalizados, as\xED como en eventos que usan modificadores, como <code>submit.prevent</code>, <code>keydown.enter</code>, etc.</p><p>Note que cuando llamamos a <code>setValue</code> y <code>trigger</code>, estamos usando <code>await</code>. Es por eso que tuvimos que marcar la prueba como <code>async</code> - para que podamos usar <code>await</code>.</p><p>setValue y <code>trigger</code> ambos, internamente, devuelven <code>Vue.nextTick()</code>. A partir de <code>vue-test-utils</code> beta 28, debe llamar a <code>nextTick</code> para asegurarse de que el sistema de reactividad de Vue actualice el DOM. Al hacer <code>await setValue(...)</code> y <code>await trigger(...)</code>, en realidad solo est\xE1 usando una abreviatura para:</p><div class="language-js"><pre><code>wrapper<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;Wait for the DOM to update before continuing the test&quot;</span>
</code></pre></div><p>A veces, puede salirse sin esperar a <code>nextTick</code>, pero si sus componentes comienzan a volverse complejos, puede alcanzar una condici\xF3n de carrera y su afirmaci\xF3n podr\xEDa ejecutarse antes de que Vue haya actualizado el DOM. Puede leer m\xE1s sobre esto en la <a href="https://vue-test-utils.vuejs.org/guides/#updates-applied-by-vue" target="_blank" rel="noopener noreferrer">documentaci\xF3n oficial de vue-test-utils</a>.</p><p>La prueba anterior tambi\xE9n sigue los tres pasos de la prueba unitaria:</p><ol><li>arreglar (configurado para la prueba. En nuestro caso, renderizamos el componente).</li><li>actuar (ejecutar acciones en el sistema)</li><li>afirmar (aseg\xFArese de que el resultado real coincida con sus expectativas)</li></ol><p>Separamos cada paso con una nueva l\xEDnea, ya que hace que las pruebas sean m\xE1s legibles.</p><p>Ejecute esta prueba, deber\xEDa pasar.</p><p><code>trigger</code> es muy simple: use <code>find</code> (para elementos DOM) o <code>findComponent</code> (para componentes Vue) para obtener el elemento que desea simular alguna entrada y llame a <code>trigger</code> con el nombre del evento y cualquier modificador.</p><h2 id="un-ejemplo-del-mundo-real" tabindex="-1">Un ejemplo del mundo real <a class="header-anchor" href="#un-ejemplo-del-mundo-real" aria-hidden="true">#</a></h2><p>Los formularios generalmente se env\xEDan a alg\xFAn punto final. Veamos c\xF3mo podr\xEDamos probar este componente con una implementaci\xF3n diferente de <code>handleSubmit</code>. Una pr\xE1ctica com\xFAn es asignar un alias a su biblioteca HTTP a <code>Vue.prototype.$http</code>. Esto nos permite realizar una solicitud ajax simplemente llamando a <code>this.$http.get(...)</code>. Conoce m\xE1s sobre esta pr\xE1ctica <a href="https://v2.vuejs.org/v2/cookbook/adding-instance-properties.html?redirect=true" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><p>A menudo, la biblioteca <em>http</em> es, <code>axios</code>, un popular cliente HTTP. En este caso, nuestro <code>handleSubmit</code> probablemente se ver\xEDa as\xED:</p><div class="language-js"><pre><code><span class="token function">handleSubmitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/register&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// show success message, etc</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// handle error</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>En este caso, una t\xE9cnica es simular <code>this.$http</code> para crear el entorno de prueba deseado. Puede leer sobre la opci\xF3n de montaje <code>global.mocks</code> <a href="https://vue-test-utils.vuejs.org/api/options.html#mocks" target="_blank" rel="noopener noreferrer">aqu\xED</a>. Veamos una implementaci\xF3n simulada de un m\xE9todo <code>http.get</code>:</p><div class="language-js"><pre><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">const</span> mockHttp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_url<span class="token punctuation">,</span> _data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      url <span class="token operator">=</span> _url
      data <span class="token operator">=</span> _data
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Hay algunas cosas interesantes que suceden aqu\xED:</p><ul><li>Creamos una <code>url</code> y una variable <code>data</code> para guardar la <code>url</code> y la <code>data</code> pasados a <code>$http.get</code>. Esto es \xFAtil para afirmar que la solicitud llega al punto final correcto, con la carga \xFAtil correcta.</li><li>Despu\xE9s de asignar los argumentos de <code>url</code> y <code>data</code>, resolvemos inmediatamente la Promesa para simular una respuesta API exitosa.</li></ul><p>Antes de ver la prueba, aqu\xED est\xE1 la nueva funci\xF3n <code>handleSubmitAsync</code>:</p><div class="language-js"><pre><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">handleSubmitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/register&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>submitted <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Adem\xE1s, actualice <code>&lt;template&gt;</code> para usar el nuevo m\xE9todo <code>handleSubmitAsync</code>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleSubmitAsync<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-username</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- ... --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Ahora, s\xF3lo la prueba.</p><h2 id="simulando-una-llamada-ajax" tabindex="-1">Simulando una llamada ajax <a class="header-anchor" href="#simulando-una-llamada-ajax" aria-hidden="true">#</a></h2><p>Primero, incluya la implementaci\xF3n simulada de <code>this.$http</code> en la parte superior, antes del bloque <code>describe</code>:</p><div class="language-js"><pre><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">const</span> mockHttp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_url<span class="token punctuation">,</span> _data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      url <span class="token operator">=</span> _url
      data <span class="token operator">=</span> _data
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Ahora, agregue la prueba, pasando el <code>$http</code> simulado a la opci\xF3n de montaje <code>global.mocks</code>:</p><div class="language-js"><pre><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;reveals a notification when submitted&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>FormSubmitter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">mocks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">$http</span><span class="token operator">:</span> mockHttp
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;[data-username]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span>
  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;submit.prevent&quot;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;Thank you for your submission, alice.&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ahora, en lugar de usar cualquier biblioteca http real adjunta a <code>Vue.prototype.$http</code>, se usar\xE1 la implementaci\xF3n simulada. Esto es bueno: podemos controlar el entorno de la prueba y obtener resultados consistentes.</p><p>Ejecutdo as\xED en realidad producir\xE1 una prueba fallida:</p><div class="language-"><pre><code>FAIL  tests/unit/FormSubmitter.spec.js
  \u25CF FormSubmitter \u203A reveals a notification when submitted

    [vue-test-utils]: find did not return .message, cannot call text() on empty Wrapper
</code></pre></div><p>Lo que sucede es que la prueba finaliza <em>antes</em> de que se resuelva la promesa devuelta por <code>mockHttp</code>. Nuevamente, podemos hacer que la prueba sea as\xEDncrona de esta manera:</p><div class="language-js"><pre><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;reveals a notification when submitted&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ahora debemos asegurarnos de que el DOM se haya actualizado y que todas las promesas se hayan resuelto antes de que contin\xFAe la prueba. <code>await wrapper.setValue(...)</code> tampoco siempre es confiable aqu\xED, porque en este caso no estamos esperando que Vue actualice el DOM, sino una dependencia externa (nuestro cliente HTTP simulado, en este caso) para resolver.</p><p>Una forma de evitar esto es usar <a href="https://test-utils.vuejs.org/api/#flushpromises" target="_blank" rel="noopener noreferrer">flushPromises</a>, que resolver\xE1 de inmediato todas las promesas pendientes. Actualice la prueba de la siguiente manera (tambi\xE9n estamos agregando <code>await wrapper.setValue(...)</code> por si acaso):</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> flushPromises <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> FormSubmitter <span class="token keyword">from</span> <span class="token string">&quot;@/components/FormSubmitter.vue&quot;</span>

<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">const</span> mockHttp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// omitted for brevity ...</span>
<span class="token punctuation">}</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;FormSubmitter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;reveals a notification when submitted&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>FormSubmitter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token comment">// omitted for brevity ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;[data-username]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;submit.prevent&quot;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">await</span> <span class="token function">flushPromises</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;Thank you for your submission, alice.&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ahora pasa la prueba.</p><p>Tambi\xE9n debemos asegurarnos de que el punto final y la carga \xFAtil sean correctos. Agregue dos afirmaciones m\xE1s a la prueba:</p><div class="language-js"><pre><code><span class="token comment">// ...</span>
<span class="token function">expect</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/register&quot;</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;alice&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>El c\xF3digo completo del componente <code>FormSubmitter.vue</code> es:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleSubmitAsync<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-username</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> 
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> 
      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submitted<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>
      Thank you for your submission, {{ username }}.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;FormSubmitter&quot;</span><span class="token punctuation">,</span>

    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">submitted</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      
      <span class="token function">handleSubmitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/register&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>submitted <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>La prueba todav\xEDa pasa.</p><p>Aqu\xED el ejemplo completo del archivo <code>FormSubmitter.spec.js</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> flushPromises <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> FormSubmitter <span class="token keyword">from</span> <span class="token string">&quot;@/components/FormSubmitter.vue&quot;</span>

<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">const</span> mockHttp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_url<span class="token punctuation">,</span> _data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      url <span class="token operator">=</span> _url
      data <span class="token operator">=</span> _data
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">factory</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">mount</span><span class="token punctuation">(</span>FormSubmitter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">mocks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">$http</span><span class="token operator">:</span> mockHttp
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>   
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;FormSubmitter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;reveals a notification when submitted&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;[data-username]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;submit.prevent&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;Thank you for your submission, alice.&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>


  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;reveals a notification when submitted&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;[data-username]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;submit.prevent&quot;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">await</span> <span class="token function">flushPromises</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;Thank you for your submission, alice.&quot;</span><span class="token punctuation">)</span>
      
    <span class="token function">expect</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/register&quot;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;alice&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>En esta secci\xF3n, vimos c\xF3mo:</p><ul><li>Use <code>trigger</code> en eventos, incluso aquellos que usan modificadores como <code>prevent</code></li><li>Use <code>setValue</code> para establecer un valor de un <code>&lt;input&gt;</code> usando <code>v-model</code></li><li>Use <code>await</code> con <code>trigger</code> y <code>setValue</code> para esperar a <code>Vue.nextTick</code> y aseg\xFArese de que el DOM se haya actualizado</li><li>Escribir pruebas utilizando los tres pasos de las pruebas unitarias</li><li>Simule un m\xE9todo adjunto a <code>Vue.prototype</code> usando la opci\xF3n de montaje <code>global.mocks</code></li><li>C\xF3mo usar <code>flushPromises</code> para resolver inmediatamente todas las promesas, una t\xE9cnica \xFAtil en las pruebas unitarias</li></ul><p>El c\xF3digo fuente de la prueba descrita en esta p\xE1gina se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/FormSubmitter.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p>`,63),e=[o];function c(u,l,i,r,k,d){return s(),a("div",null,e)}var f=n(p,[["render",c]]);export{g as __pageData,f as default};
