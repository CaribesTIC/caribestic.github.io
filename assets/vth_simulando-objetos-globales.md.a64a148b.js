import{_ as a,c as n,o as s,a as e}from"./app.0b30a2fc.js";const g='{"title":"Simulando Objetos Globales","description":"","frontmatter":{},"headers":[{"level":2,"title":"Simulando Objetos Globales","slug":"simulando-objetos-globales"},{"level":2,"title":"La opci\xF3n de montaje simulado","slug":"la-opcion-de-montaje-simulado"},{"level":2,"title":"Ejemplo con vue-i18n","slug":"ejemplo-con-vue-i18n"},{"level":2,"title":"Estableciendo simulacros predeterminados usando config","slug":"estableciendo-simulacros-predeterminados-usando-config"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vth/simulando-objetos-globales.md"}',o={},t=e(`<h2 id="simulando-objetos-globales" tabindex="-1">Simulando Objetos Globales <a class="header-anchor" href="#simulando-objetos-globales" aria-hidden="true">#</a></h2><p><code>vue-test-utils</code> proporciona una forma sencilla de simular objetos globales adjuntos a <code>Vue.prototype</code>, tanto en base a prueba por prueba como para establecer una simulaci\xF3n predeterminada para todas las pruebas.</p><p>La prueba utilizada en el siguiente ejemplo se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app/tests/unit/Bilingual.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a></p><h2 id="la-opcion-de-montaje-simulado" tabindex="-1">La opci\xF3n de montaje simulado <a class="header-anchor" href="#la-opcion-de-montaje-simulado" aria-hidden="true">#</a></h2><p>La <a href="https://vue-test-utils.vuejs.org/api/options.html#mocks" target="_blank" rel="noopener noreferrer">opci\xF3n de montaje simulado</a> es una forma de establecer el valor de cualquier propiedad adjunta a <code>Vue.prototype</code>. Esto com\xFAnmente incluye:</p><ul><li><code>$store</code>, para Vuex</li><li><code>$router</code>, para Vue Router</li><li><code>$t</code>, para vue-i18n</li></ul><p>y muchos otros.</p><h2 id="ejemplo-con-vue-i18n" tabindex="-1">Ejemplo con vue-i18n <a class="header-anchor" href="#ejemplo-con-vue-i18n" aria-hidden="true">#</a></h2><p>El uso con Vuex y Vue Router se analiza en las secciones respectivas, <a href="./../vth/probando-vuex-en-componentes.html">aqu\xED</a> y <a href="./../vth/vue-router.html">aqu\xED</a>. Veamos un ejemplo con <a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener noreferrer">vue-i18n</a>. Si bien ser\xEDa posible usar <code>createLocalVue</code> e instalar <code>vue-i18n</code> para cada prueba, eso r\xE1pidamente se volver\xEDa engorroso e introducir\xEDa una gran cantidad de repeticiones. Primero, un componente <code>&lt;Bilingual&gt;</code> que usa <code>vue-i18n</code>:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ $t(&quot;helloWorld&quot;) }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bilingual&quot;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>La forma en que funciona <code>vue-i18n</code> es declarar su traducci\xF3n en otro archivo, luego hacer referencia a ellos con <code>$t</code>. A los efectos de esta prueba, en realidad no importa c\xF3mo se vea el archivo de traducci\xF3n, pero para este componente podr\xEDa verse as\xED:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;en&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">helloWorld</span><span class="token operator">:</span> <span class="token string">&quot;Hello world!&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;ja&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">helloWorld</span><span class="token operator">:</span> <span class="token string">&quot;\u3053\u3093\u306B\u3061\u306F\u3001\u4E16\u754C\uFF01&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Seg\xFAn el entorno local, se representa la traducci\xF3n correcta. Intentemos renderizar el componente en una prueba, sin ninguna burla.</p><p>Ejecutar esta prueba arroja un enorme rastro de pila. Si observa cuidadosamente la salida, puede ver:</p><div class="language-"><pre><code>&quot;TypeError: _ctx.$t is not a function&quot;
</code></pre></div><p>Esto se debe a que no instalamos <code>vue-i18n</code>, por lo que el m\xE9todo global <code>$t</code> no existe. Vamos a simularlo usando la opci\xF3n de montaje <code>mocks</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>
<span class="token keyword">import</span> Bilingual <span class="token keyword">from</span> <span class="token string">&quot;@/components/Bilingual.vue&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;Bilingual&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;renders successfully&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Bilingual<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">mocks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function-variable function">$t</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> msg
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\xA1Ahora pasa la prueba! Hay muchos usos para la opci\xF3n <code>mocks</code>. La mayor\xEDa de las veces me encuentro simulando los objetos globales proporcionados por los tres paquetes mencionados anteriormente.</p><h2 id="estableciendo-simulacros-predeterminados-usando-config" tabindex="-1">Estableciendo simulacros predeterminados usando config <a class="header-anchor" href="#estableciendo-simulacros-predeterminados-usando-config" aria-hidden="true">#</a></h2><p>A veces, desea tener un valor predeterminado para el simulacro, por lo que no lo crea prueba por prueba. Puede hacerlo utilizando la API de <a href="https://v1.test-utils.vuejs.org/api/#config" target="_blank" rel="noopener noreferrer">config</a> proporcionada por <code>vue-test-utils</code>. Expandamos el ejemplo de <code>vue-i18n</code>. Puede configurar simulacros predeterminados en cualquier lugar haciendo lo siguiente:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>

config<span class="token punctuation">.</span>global<span class="token punctuation">.</span>mocks <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mock</span><span class="token operator">:</span> <span class="token string">&quot;Default Mock Value&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Declarar\xE9 el simulacro predeterminado que se carga antes de que las pruebas se ejecuten autom\xE1ticamente. Tambi\xE9n importar\xE9 el objeto de traducci\xF3n de ejemplo anterior y lo usar\xE9 en la implementaci\xF3n simulada.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>
<span class="token keyword">import</span> Bilingual <span class="token keyword">from</span> <span class="token string">&quot;@/components/Bilingual.vue&quot;</span>
<span class="token keyword">import</span> translations <span class="token keyword">from</span> <span class="token string">&quot;@/translations.js&quot;</span>

<span class="token keyword">const</span> locale <span class="token operator">=</span> <span class="token string">&quot;en&quot;</span>

config<span class="token punctuation">.</span>global<span class="token punctuation">.</span>mocks <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">$t</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> translations<span class="token punctuation">[</span>locale<span class="token punctuation">]</span><span class="token punctuation">[</span>msg<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Ahora se generar\xE1 una traducci\xF3n real, a pesar de usar una funci\xF3n <code>$t</code> simulada. Vuelva a ejecutar la prueba, esta vez usando <code>console.log</code> en <code>wrapper.html()</code> y eliminando la opci\xF3n de montaje <code>mocks</code>:</p><div class="language-js"><pre><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;Bilingual&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;renders successfully&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Bilingual<span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>La prueba pasa y se renderiza el siguiente marcado:</p><div class="language-"><pre><code>&lt;div class=&quot;hello&quot;&gt;
  Hello world!
&lt;/div&gt;
</code></pre></div><p>Puede leer sobre el uso de simulacros para probar Vuex <a href="./../vth/probando-vuex-en-componentes.html">aqu\xED</a>. La t\xE9cnica es la misma.</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>Esta gu\xEDa discuti\xF3:</p><ul><li>Usar <code>global.mocks</code> para simular un objeto global en una base de prueba por prueba</li><li>Usar <code>config.global.mocks</code> para establecer un simulacro predeterminado</li></ul>`,31),p=[t];function c(l,u,r,i,d,k){return s(),n("div",null,p)}var b=a(o,[["render",c]]);export{g as __pageData,b as default};
