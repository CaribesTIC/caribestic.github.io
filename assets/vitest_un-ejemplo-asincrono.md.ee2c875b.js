import{_ as n,c as s,o as a,a as t}from"./app.7cdb76e5.js";const f='{"title":"Un Ejemplo As\xEDncrono","description":"","frontmatter":{},"headers":[{"level":2,"title":".resolves","slug":"resolves"},{"level":2,"title":"async/await","slug":"async-await"},{"level":2,"title":"Manejo de errores","slug":"manejo-de-errores"},{"level":2,"title":".rejects","slug":"rejects"}],"relativePath":"vitest/un-ejemplo-asincrono.md"}',p={},e=t(`<h1 id="un-ejemplo-asincrono" tabindex="-1">Un Ejemplo As\xEDncrono <a class="header-anchor" href="#un-ejemplo-asincrono" aria-hidden="true">#</a></h1><p>Implementemos un m\xF3dulo que obtenga datos de usuario de una API y devuelva el nombre de usuario.</p><div class="language-js"><pre><code><span class="token comment">// models/user.js</span>
<span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&#39;@/services/request&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token parameter">userID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>En la implementaci\xF3n anterior, esperamos que el m\xF3dulo <code>request.js</code> devuelva una promesa. Encadenamos una llamada a <code>then</code> para recibir el nombre de usuario.</p><p>Ahora imagine una implementaci\xF3n de <code>request.js</code> que va a la red y obtiene algunos datos del usuario:</p><div class="language-js"><pre><code><span class="token comment">// services/request.js</span>
<span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;http&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is an example of an http request, for example to fetch</span>
    <span class="token comment">// user data from an API.</span>
    <span class="token comment">// This module is being mocked in &#39;services/__mocks__/request.js&#39;</span>
    http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> url<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">_data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>data <span class="token operator">+=</span> _data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Debido a que no queremos ir a la red en nuestra prueba, vamos a crear una simulaci\xF3n manual para nuestro m\xF3dulo <code>request.js</code> en la carpeta <code>__mocks__</code> (la carpeta distingue entre may\xFAsculas y min\xFAsculas, <code>__MOCKS__</code> no funcionar\xE1). Podr\xEDa verse algo como esto:</p><div class="language-js"><pre><code><span class="token comment">// services/__mocks__/request.js</span>
<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Mark&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Paul&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> userID <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">&#39;/users/&#39;</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      users<span class="token punctuation">[</span>userID<span class="token punctuation">]</span>
        <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>userID<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">User with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not found.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Ahora escribamos una prueba para nuestra funcionalidad as\xEDncrona.</p><div class="language-js"><pre><code><span class="token comment">//tests/models/user.spec.js</span>
vi<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;@/services/request&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> user <span class="token keyword">from</span> <span class="token string">&#39;@/models/user&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// The assertion for a promise must be returned.</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;works with promises&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;Mark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Llamamos a <code>vi.mock(&#39;@/services/request&#39;)</code> para decirle a Vitest que use nuestro simulacro manual. <code>it</code> espera que el valor de retorno sea una Promesa que se va a resolver. Puede encadenar tantas Promesas como desee y llamar a <code>expect</code> en cualquier momento, siempre que devuelva una Promesa al final.</p><h2 id="resolves" tabindex="-1"><code>.resolves</code> <a class="header-anchor" href="#resolves" aria-hidden="true">#</a></h2><p>Hay una forma menos detallada de usar <code>resolves</code> para desenvolver el valor de una promesa cumplida junto con cualquier otro comparador. Si la promesa es rechazada, la afirmaci\xF3n fallar\xE1.</p><div class="language-js"><pre><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;works with resolves&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;Paul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="async-await" tabindex="-1"><code>async</code>/<code>await</code> <a class="header-anchor" href="#async-await" aria-hidden="true">#</a></h2><p>Tambi\xE9n es posible escribir pruebas utilizando la sintaxis <code>async</code>/<code>await</code>. As\xED es como escribir\xEDas los mismos ejemplos de antes:</p><div class="language-js"><pre><code><span class="token comment">// async/await can be used.</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;works with async/await&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;Mark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// async/await can also be used with \`.resolves\`.</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;works with async/await and resolves&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;Paul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="manejo-de-errores" tabindex="-1">Manejo de errores <a class="header-anchor" href="#manejo-de-errores" aria-hidden="true">#</a></h2><p>Los errores se pueden manejar usando el m\xE9todo <code>.catch</code>. Aseg\xFArese de agregar <code>expect.assertions</code> para verificar que se llame a un cierto n\xFAmero de afirmaciones. De lo contrario, una promesa cumplida no fallar\xEDa la prueba:</p><div class="language-js"><pre><code><span class="token comment">// Testing for async errors using Promise.catch.</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;tests error with promises&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;User with 2 not found.&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or using async/await.</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;tests error with async/await&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;User with 1 not found.&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="rejects" tabindex="-1"><code>.rejects</code> <a class="header-anchor" href="#rejects" aria-hidden="true">#</a></h2><p>El ayudante .<code>rejects</code> funciona como el ayudante <code>.resolves</code>. Si se cumple la promesa, la prueba fallar\xE1 autom\xE1ticamente. <code>expect.assertions(number)</code> no es necesario, pero se recomienda para verificar que se llama a un cierto n\xFAmero de <a href="https://vitest.dev/api/#expect-assertions" target="_blank" rel="noopener noreferrer">afirmaciones</a> durante una prueba. De lo contrario, es f\xE1cil olvidar a <code>return</code>/<code>await</code> las afirmaciones <code>.resolves</code>.</p><div class="language-js"><pre><code><span class="token comment">// Testing for async errors using \`.rejects\`.</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;tests error with rejects&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;User with 3 not found.&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or using async/await with \`.rejects\`.</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;tests error with async/await and rejects&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;User with 3 not found.&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>El c\xF3digo de este ejemplo est\xE1 disponible en <a href="https://github.com/facebook/jest/tree/main/examples/async" target="_blank" rel="noopener noreferrer">ejemplos/as\xEDncronos</a>.</p><p>Si desea probar los temporizadores, como setTimeout, eche un vistazo a la documentaci\xF3n de las <a href="./../vitest/simulaciones-de-temporizador.html">Simulaciones de Temporizador</a>.</p>`,25),o=[e];function c(u,l,i,r,k,d){return a(),s("div",null,o)}var g=n(p,[["render",c]]);export{f as __pageData,g as default};
