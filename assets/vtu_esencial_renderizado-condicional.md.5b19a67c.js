import{_ as n,c as a,o as s,a as e}from"./app.8171c9f3.js";const f='{"title":"Renderizado Condicional","description":"","frontmatter":{},"headers":[{"level":2,"title":"Encontrar elementos","slug":"encontrar-elementos"},{"level":2,"title":"Usando get()","slug":"usando-get"},{"level":2,"title":"Usando find() y exists()","slug":"usando-find-y-exists"},{"level":2,"title":"Uso de datos","slug":"uso-de-datos"},{"level":2,"title":"Comprobaci\xF3n de la visibilidad de los elementos","slug":"comprobacion-de-la-visibilidad-de-los-elementos"},{"level":2,"title":"Usando isVisible()","slug":"usando-isvisible"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vtu/esencial/renderizado-condicional.md"}',o={},t=e(`<h1 id="renderizado-condicional" tabindex="-1">Renderizado Condicional <a class="header-anchor" href="#renderizado-condicional" aria-hidden="true">#</a></h1><p>Vue Test Utils tiene una gama de funciones para renderizar y hacer afirmaciones sobre el estado de un componente, con el objetivo de verificar que se comporta correctamente. Este art\xEDculo explorar\xE1 c\xF3mo representar componentes, as\xED como tambi\xE9n verificar\xE1 que est\xE9n representando el contenido correctamente.</p><p>Este art\xEDculo tambi\xE9n est\xE1 disponible como un <a href="https://www.youtube.com/watch?v=T3CHtGgEFTs&amp;list=PLC2LZCNWKL9ahK1IoODqYxKu5aA9T5IOA&amp;index=15" target="_blank" rel="noopener noreferrer">video corto</a>.</p><h2 id="encontrar-elementos" tabindex="-1">Encontrar elementos <a class="header-anchor" href="#encontrar-elementos" aria-hidden="true">#</a></h2><p>Una de las caracter\xEDsticas m\xE1s b\xE1sicas de Vue es la capacidad de insertar y eliminar elementos din\xE1micamente con <code>v-if</code>. Veamos c\xF3mo probar un componente que usa <code>v-if</code>.</p><div class="language-js"><pre><code><span class="token keyword">const</span> Nav <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;nav&gt;
      &lt;a id=&quot;profile&quot; href=&quot;/profile&quot;&gt;My Profile&lt;/a&gt;
      &lt;a v-if=&quot;admin&quot; id=&quot;admin&quot; href=&quot;/admin&quot;&gt;Admin&lt;/a&gt;
    &lt;/nav&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>En el componente <code>&lt;Nav&gt;</code>, se muestra un enlace al perfil del usuario. Adem\xE1s, si el valor de <code>admin</code> es <code>true</code>, revelamos un enlace a la secci\xF3n de administraci\xF3n. Hay tres escenarios que debemos verificar se est\xE1n comportando correctamente:</p><ol><li>Debe mostrarse el enlace <code>/profile</code>.</li><li>Cuando el usuario es administrador, se debe mostrar el enlace <code>/admin</code>.</li><li>Cuando el usuario no es administrador, no se debe mostrar el enlace <code>/admin</code>.</li></ol><h2 id="usando-get" tabindex="-1">Usando get() <a class="header-anchor" href="#usando-get" aria-hidden="true">#</a></h2><p><code>wrapper</code> tiene un m\xE9todo <code>get()</code> que busca un elemento existente. Utiliza la sintaxis de <code>querySelector</code>.</p><p>Podemos afirmar el contenido del enlace del perfil usando <code>get()</code>:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;renders a profile link&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Nav<span class="token punctuation">)</span>

  <span class="token comment">// Here we are implicitly asserting that the</span>
  <span class="token comment">// element #profile exists.</span>
  <span class="token keyword">const</span> profileLink <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#profile&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>profileLink<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;My Profile&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Si <code>get()</code> no devuelve un elemento que coincida con el selector, generar\xE1 un error y su prueba fallar\xE1. <code>get()</code> devuelve un <code>DOMWrapper</code> si se encuentra un elemento. Un <code>DOMWrapper</code> es un contenedor delgado alrededor del elemento DOM que implementa la <a href="https://test-utils.vuejs.org/api/#wrapper-methods" target="_blank" rel="noopener noreferrer">API Wrapper</a> - es por eso que podemos hacer <code>profileLink.text()</code> y acceder al texto. Puede acceder al elemento sin procesar usando la propiedad de <code>element</code>.</p><p>Hay otro tipo de contenedor - un <code>VueWrapper</code> - que se devuelve desde <a href="https://test-utils.vuejs.org/api/#getcomponent" target="_blank" rel="noopener noreferrer"><code>getComponent</code></a> que funciona de la misma manera.</p><h2 id="usando-find-y-exists" tabindex="-1">Usando find() y exists() <a class="header-anchor" href="#usando-find-y-exists" aria-hidden="true">#</a></h2><p><code>get()</code> funciona asumiendo que los elementos existen y arroja un error cuando no es as\xED. No se recomienda usarlo para afirmar existencia.</p><p>Para hacerlo, usamos <code>find()</code> y <code>exist()</code>. La siguiente prueba afirma que si <code>admin</code> es <code>false</code> (que es por defecto), el enlace de administraci\xF3n no est\xE1 presente:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;does not render an admin link&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Nav<span class="token punctuation">)</span>

  <span class="token comment">// Using \`wrapper.get\` would throw and make the test fail.</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;#admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Tenga en cuenta que estamos llamando a <code>exist()</code> en el valor devuelto por <code>.find()</code>. <code>find()</code>, como <code>mount()</code>, tambi\xE9n devuelve un <code>wrapper</code>. <code>mount()</code> tiene algunos m\xE9todos adicionales, porque est\xE1 envolviendo un componente Vue, y <code>find()</code> solo devuelve un nodo DOM regular, pero muchos de los m\xE9todos se comparten entre ambos. Algunos otros m\xE9todos incluyen <code>classes()</code>, que obtiene las clases que tiene un nodo DOM, y <code>trigger()</code> para simular la interacci\xF3n del usuario. Puede encontrar una lista de m\xE9todos admitidos <a href="https://test-utils.vuejs.org/api/#wrapper-methods" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><h2 id="uso-de-datos" tabindex="-1">Uso de datos <a class="header-anchor" href="#uso-de-datos" aria-hidden="true">#</a></h2><p>La prueba final es afirmar que el enlace de administraci\xF3n se representa cuando <code>admin</code> es <code>true</code>. Es <code>false</code> por defecto, pero podemos anularlo usando el segundo argumento de <code>mount()</code>, las <a href="https://test-utils.vuejs.org/api/" target="_blank" rel="noopener noreferrer">opciones de montaje</a>.</p><p>Para <code>data</code>, usamos la opci\xF3n de <code>data</code> con el nombre apropiado:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;renders an admin link&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Nav<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;#admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token comment">// Again, by using \`get()\` we are implicitly asserting that</span>
  <span class="token comment">// the element exists.</span>
  
  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;Admin&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Si tiene otras propiedades en <code>data</code> - no se preocupe: Vue Test Utils fusionar\xE1 las dos. La <code>data</code> de las opciones de montaje tendr\xE1n prioridad sobre los valores predeterminados.</p><p>Para saber qu\xE9 otras opciones de montaje existen, consulte <a href="./../esencial/pasando-datos-a-componentes.html">Pasando Datos</a> o consulte las <a href="https://test-utils.vuejs.org/api/" target="_blank" rel="noopener noreferrer">opciones de montaje</a>.</p><h2 id="comprobacion-de-la-visibilidad-de-los-elementos" tabindex="-1">Comprobaci\xF3n de la visibilidad de los elementos <a class="header-anchor" href="#comprobacion-de-la-visibilidad-de-los-elementos" aria-hidden="true">#</a></h2><p>A veces, solo desea ocultar/mostrar un elemento mientras lo mantiene en el DOM. Vue ofrece <code>v-show</code> para escenarios como tales. (Puedes comprobar las diferencias entre <code>v-if</code> y <code>v-show</code> <a href="https://vuejs.org/guide/essentials/conditional.html#v-if-vs-v-show" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><p>As\xED es como se ve un componente con <code>v-show</code>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Nav <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;nav&gt;
      &lt;a id=&quot;user&quot; href=&quot;/profile&quot;&gt;My Profile&lt;/a&gt;
      &lt;ul v-show=&quot;shouldShowDropdown&quot; id=&quot;user-dropdown&quot;&gt;
        &lt;!-- dropdown content --&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">shouldShowDropdown</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>En este escenario, el elemento no est\xE1 visible pero siempre se representa. <code>get()</code> o <code>find()</code> siempre devolver\xE1n un Wrapper \u2013 <code>find()</code> con <code>.exists()</code> siempre devolver\xE1 <code>true</code> \u2013 porque el <strong>elemento a\xFAn est\xE1 en el DOM</strong>.</p><h2 id="usando-isvisible" tabindex="-1">Usando isVisible() <a class="header-anchor" href="#usando-isvisible" aria-hidden="true">#</a></h2><p><code>isVisible()</code> brinda la capacidad de verificar elementos ocultos. En particular, <code>isVisible()</code> verificar\xE1 si:</p><ul><li>un elemento o sus ancestros tienen estilos <code>display: none</code>, <code>visibility: hidden</code>, <code>opacity :0</code></li><li>un elemento o sus ancestros se encuentran dentro de la etiqueta <code>&lt;details&gt;</code> colapsada</li><li>un elemento o sus ancestros tienen el atributo <code>hidden</code></li></ul><p>Para cualquiera de estos casos, <code>isVisible()</code> devuelve <code>false</code>.</p><p>Los escenarios de prueba usando <code>v-show</code> se ver\xE1n as\xED:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;does not show the user dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Nav<span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#user-dropdown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;does show the user dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Nav<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">shouldShowDropdown</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#user-dropdown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><ul><li>Usa <code>find()</code> junto con <code>exist()</code> para verificar si un elemento est\xE1 en el DOM.</li><li>Use <code>get()</code> si espera que el elemento est\xE9 en el DOM.</li><li>La opci\xF3n de montaje <code>data</code> se puede utilizar para establecer valores predeterminados en un componente.</li><li>Usa <code>get()</code> con <code>isVisible()</code> para verificar la visibilidad de un elemento que est\xE1 en el DOM</li></ul>`,38),p=[t];function c(i,l,u,r,d,k){return s(),a("div",null,p)}var g=n(o,[["render",c]]);export{f as __pageData,g as default};
