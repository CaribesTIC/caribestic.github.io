import{_ as e,c as a,o,a as s}from"./app.9b0c39a4.js";const x='{"title":"Probando Vuex","description":"","frontmatter":{},"headers":[{"level":2,"title":"Los Dos Lados de Probando Vuex","slug":"los-dos-lados-de-probando-vuex"}],"relativePath":"vth/probando-vuex.md"}',r={},n=s('<h1 id="probando-vuex" tabindex="-1">Probando Vuex <a class="header-anchor" href="#probando-vuex" aria-hidden="true">#</a></h1><p>Las siguientes gu\xEDas analizan las pruebas de Vuex</p><h2 id="los-dos-lados-de-probando-vuex" tabindex="-1">Los Dos Lados de Probando Vuex <a class="header-anchor" href="#los-dos-lados-de-probando-vuex" aria-hidden="true">#</a></h2><p>En general, los componentes interactuar\xE1n con Vuex por</p><ol><li>Cometer una mutaci\xF3n</li><li>Despachar una acci\xF3n</li><li>Acceder al estado a trav\xE9s de <code>$store.state</code> o <code>getters</code></li></ol><p>Estas pruebas son para afirmar que el componente se comporta correctamente seg\xFAn el estado actual de la tienda Vuex. No necesitan saber acerca de la implementaci\xF3n de los mutadores, acciones o captadores.</p><p>Cualquier l\xF3gica realizada por el almac\xE9n, como mutaciones y captadores, se puede probar de forma aislada. Dado que las tiendas Vuex se componen de funciones regulares de JavaScript, se prueban f\xE1cilmente.</p><p>Las primeras gu\xEDas analizan t\xE9cnicas para probar Vuex de forma aislada considerando mutaciones, acciones y captadores. Las siguientes gu\xEDas presentan algunas t\xE9cnicas para probar los componentes que usan una tienda Vuex y garantizar que se comporten correctamente seg\xFAn el estado de la tienda.</p>',8),t=[n];function d(c,i,l,p,u,m){return o(),a("div",null,t)}var b=e(r,[["render",d]]);export{x as __pageData,b as default};
