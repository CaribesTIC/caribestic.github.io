import{_ as n,c as a,o as s,a as t}from"./app.7cdb76e5.js";const g='{"title":"Probando Vuex en componentes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Mutaciones y Acciones","slug":"mutaciones-y-acciones"},{"level":2,"title":"Crear el componente","slug":"crear-el-componente"},{"level":2,"title":"Probando con una tienda Vuex real","slug":"probando-con-una-tienda-vuex-real"},{"level":2,"title":"Probando usando una tienda simulada","slug":"probando-usando-una-tienda-simulada"},{"level":2,"title":"Probando una Acci\xF3n (o Mutaci\xF3n) con Espacio de Nombre","slug":"probando-una-accion-o-mutacion-con-espacio-de-nombre"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vth/probando-vuex-en-componentes-mutaciones-y-acciones.md"}',o={},p=t(`<h1 id="probando-vuex-en-componentes" tabindex="-1">Probando Vuex en componentes <a class="header-anchor" href="#probando-vuex-en-componentes" aria-hidden="true">#</a></h1><h2 id="mutaciones-y-acciones" tabindex="-1">Mutaciones y Acciones <a class="header-anchor" href="#mutaciones-y-acciones" aria-hidden="true">#</a></h2><p>La gu\xEDa anterior discuti\xF3 la prueba de componentes que usan <code>$store.state</code> y <code>$store.getters</code>, que proporcionan el estado actual del componente. Cuando afirmar un componente correctamente comete una mutaci\xF3n o env\xEDa una acci\xF3n, lo que realmente queremos hacer es afirmar <code>$store.commit</code> y <code>$store.dispatch</code> se llama con el controlador correcto (la mutaci\xF3n o acci\xF3n a llamar) y la carga \xFAtil.</p><p>Hay dos maneras de hacer esto. Una es usar una tienda Vuex real con <code>createStore</code> y otra es usar una tienda simulada. Ambas t\xE9cnicas se demuestran <a href="/vue-tdd/vth/probando-vuex-en-componentes.html">aqu\xED</a>. Ve\xE1moslos de nuevo, en el contexto de mutaciones y acciones.</p><p>El c\xF3digo fuente de la prueba descrita en esta p\xE1gina se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/ComponentWithButtons.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p><h2 id="crear-el-componente" tabindex="-1">Crear el componente <a class="header-anchor" href="#crear-el-componente" aria-hidden="true">#</a></h2><p>Para estos ejemplos, probaremos un componente <code>&lt;ComponentWithButtons&gt;</code>:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> 
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>commit<span class="token punctuation">&quot;</span></span> 
      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCommit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      Commit
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> 
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dispatch<span class="token punctuation">&quot;</span></span> 
      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleDispatch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      Dispatch
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> 
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>namespaced-dispatch<span class="token punctuation">&quot;</span></span> 
      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleNamespacedDispatch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      Namespaced Dispatch
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ComponentWithButtons&quot;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handleCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;testMutation&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;Test Commit&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">handleDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;testAction&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;Test Dispatch&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">handleNamespacedDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;namespaced/very/deeply/testAction&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;Test Namespaced Dispatch&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="probando-con-una-tienda-vuex-real" tabindex="-1">Probando con una tienda Vuex real <a class="header-anchor" href="#probando-con-una-tienda-vuex-real" aria-hidden="true">#</a></h2><p>Primero escribamos un <code>ComponentWithButtons.spec.js</code> con una prueba para la mutaci\xF3n. Recuerda, queremos verificar dos cosas:</p><ol><li>\xBFSe cometi\xF3 la mutaci\xF3n correcta?</li><li>\xBFLa carga \xFAtil era correcta?</li></ol><p>Veamos la prueba.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>
<span class="token keyword">import</span> ComponentWithButtons <span class="token keyword">from</span> <span class="token string">&quot;@/components/ComponentWithButtons.vue&quot;</span>

<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">testMutation</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mutations
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;ComponentWithButtons&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;commits a mutation when a button is clicked&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ComponentWithButtons<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>store<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    

    <span class="token function">expect</span><span class="token punctuation">(</span>mutations<span class="token punctuation">.</span>testMutation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;Test Commit&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Observe que las pruebas est\xE1n marcadas como <code>await</code> y llame a <code>nextTick</code>. Vea <a href="./../vth/simulando-la-entrada-del-usuario.html#escribiendo-la-prueba">aqu\xED</a> para m\xE1s detalles sobre por qu\xE9.</p><p>Hay mucho c\xF3digo en la prueba anterior; sin embargo, no est\xE1 sucediendo nada demasiado emocionante. Creamos una nueva tienda con <code>createStore</code>, pasando una funci\xF3n simulada de Vitest (vi.fn()) en lugar de <code>testMutation</code>. Las mutaciones de Vuex siempre se llaman con dos argumentos: el primero es el estado actual y el segundo es la carga \xFAtil. Dado que no declaramos ning\xFAn estado para la tienda, esperamos que se llame con un objeto vac\xEDo. Se espera que el segundo argumento sea <code>{ msg: &quot;Test Commit&quot; }</code>, que est\xE1 codificado en el componente.</p><p>Esto es mucho c\xF3digo repetitivo para escribir, pero es una forma correcta y v\xE1lida de verificar que los componentes se comporten correctamente. Otra alternativa que requiere menos c\xF3digo es usar una tienda simulada. Veamos c\xF3mo hacerlo mientras se escribe una prueba para afirmar que se env\xEDa <code>testAction</code>.</p><h2 id="probando-usando-una-tienda-simulada" tabindex="-1">Probando usando una tienda simulada <a class="header-anchor" href="#probando-usando-una-tienda-simulada" aria-hidden="true">#</a></h2><p>Veamos el c\xF3digo, luego comparemos y contrastemos con la prueba anterior. Recuerda, queremos verificar:</p><ol><li>Se env\xEDa la acci\xF3n correcta</li><li>La carga \xFAtil es correcta</li></ol><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/test-utils&quot;</span>
<span class="token keyword">import</span> ComponentWithButtons <span class="token keyword">from</span> <span class="token string">&quot;@/components/ComponentWithButtons.vue&quot;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;ComponentWithButtons&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;dispatches an action when a button is clicked&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mockStore <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ComponentWithButtons<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">mocks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">$store</span><span class="token operator">:</span> mockStore 
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.dispatch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token function">expect</span><span class="token punctuation">(</span>mockStore<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span>
      <span class="token string">&quot;testAction&quot;</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;Test Dispatch&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Esto es mucho m\xE1s compacto que el ejemplo anterior. Sin crear tienda. En lugar de burlarnos de la funci\xF3n, en el caso anterior donde hicimos <code>testMutation = vi.fn()</code>, en realidad nos burlamos de la funci\xF3n <code>dispatch</code> en s\xED. Dado que <code>$store.dispatch</code> es solo una funci\xF3n normal de JavaScript, podemos hacer esto. Luego afirmamos que el controlador de acci\xF3n correcto, <code>testAction</code>, es el primer argumento, y el segundo argumento, la carga \xFAtil, es correcto. No nos importa lo que realmente hace la acci\xF3n - eso se puede probar de forma aislada. El objetivo de esta prueba es simplemente verificar que hacer click en un bot\xF3n env\xEDa la acci\xF3n correcta con la carga \xFAtil.</p><p>Ya sea que use una tienda real o una tienda simulada, sus pruebas se reducen a sus preferencias personales. Ambos son correctos. Lo importante es que est\xE1s probando tus componentes.</p><h2 id="probando-una-accion-o-mutacion-con-espacio-de-nombre" tabindex="-1">Probando una Acci\xF3n (o Mutaci\xF3n) con Espacio de Nombre <a class="header-anchor" href="#probando-una-accion-o-mutacion-con-espacio-de-nombre" aria-hidden="true">#</a></h2><p>El tercer y \xFAltimo ejemplo muestra otra forma de probar que se envi\xF3 una acci\xF3n (o se cometi\xF3 una mutaci\xF3n) con los argumentos correctos. Esto combin\xF3 las dos t\xE9cnicas discutidas anteriormente: una tienda <code>Vuex</code> real y un m\xE9todo <code>dispatch</code> simulado.</p><div class="language-js"><pre><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;dispatch a namespaced action when button is clicked&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  store<span class="token punctuation">.</span>dispatch <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ComponentWithButtons<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>store<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.namespaced-dispatch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span>
    <span class="token string">&#39;namespaced/very/deeply/testAction&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;Test Namespaced Dispatch&quot;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Comenzamos creando una tienda Vuex, con los m\xF3dulos que nos interesan. Declaro el m\xF3dulo <code>namespacedModule</code> dentro de la prueba, pero en una aplicaci\xF3n del mundo real, solo importar\xEDa los m\xF3dulos de los que depende su componente. Luego reemplazamos el m\xE9todo <code>dispatch</code> con un simulacro de <code>vi.fn</code> y hacemos afirmaciones en contra de eso.</p><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>En esta secci\xF3n cubrimos:</p><ul><li>Usando Vuex con <code>createStore</code> y burl\xE1ndose de una mutaci\xF3n</li><li>Burl\xE1ndose de la API de Vuex (<code>dispatch</code> y <code>commit</code>)</li><li>Usar una tienda Vuex real con una funci\xF3n de <code>dispatch</code> simulada</li></ul><p>El c\xF3digo fuente de la prueba descrita en esta p\xE1gina se puede encontrar <a href="https://github.com/lmiller1990/vue-testing-handbook/blob/master/demo-app-vue-3/tests/unit/ComponentWithButtons.spec.js" target="_blank" rel="noopener noreferrer">aqu\xED</a>.</p>`,30),e=[p];function c(u,l,i,r,k,d){return s(),a("div",null,e)}var h=n(o,[["render",c]]);export{g as __pageData,h as default};
