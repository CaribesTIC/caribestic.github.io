import{_ as n,c as a,o as s,a as t}from"./app.c20c0d51.js";const m='{"title":"Patrones para Probar Accesorios","description":"","frontmatter":{},"headers":[{"level":2,"title":"Los fundamentos","slug":"los-fundamentos"},{"level":2,"title":"Agregar un validador","slug":"agregar-un-validador"},{"level":2,"title":"Concepto Clave: Separaci\xF3n de Preocupaciones","slug":"concepto-clave-separacion-de-preocupaciones"},{"level":2,"title":"Separaci\xF3n de Preocupaciones - Caso de Estudio","slug":"separacion-de-preocupaciones-caso-de-estudio"},{"level":2,"title":"Otro Ejemplo","slug":"otro-ejemplo"},{"level":2,"title":"La verdadera prueba: \xBFSe refactoriza?","slug":"la-verdadera-prueba-\xBFse-refactoriza"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vtl/ddp/patrones-para-probar-accesorios.md"}',p={},e=t(`<h1 id="patrones-para-probar-accesorios" tabindex="-1">Patrones para Probar Accesorios <a class="header-anchor" href="#patrones-para-probar-accesorios" aria-hidden="true">#</a></h1><p>En esta secci\xF3n, exploramos los accesorios y el tipo de pruebas que quiz\xE1s desee considerar escribir. Esto lleva a un tema mucho m\xE1s fundamental e importante; trazar una l\xEDnea clara entre la l\xF3gica de negocios y la UI, tambi\xE9n conocida como <em>separaci\xF3n de preocupaciones</em>, y c\xF3mo sus pruebas pueden ayudar a aclarar esta distinci\xF3n.</p><blockquote><p>Considere una de las grandes ideas detr\xE1s de marcos como Vue y React: <strong><em>&quot;Su interfaz de usuario es una funci\xF3n de sus datos&quot;</em>.</strong></p></blockquote><p>Esta idea viene en muchas formas; otro es <em>&quot;interfaces impulsadas por datos&quot;</em>. B\xE1sicamente, su interfaz de usuario (UI) debe estar determinada por los datos presentes. Dados los datos <code>X</code>, su UI deber\xEDa ser <code>Y</code>. En inform\xE1tica, esto se conoce como determinismo. Tome esta funci\xF3n de suma por ejemplo:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre></div><p>Una funci\xF3n de suma simple. Es una funci\xF3n pura.</p><p>Cuando se llama con el mismo valor para <code>a</code> y <code>b</code>, siempre obtienes el mismo resultado. El resultado est\xE1 predeterminado. Es <em>determinista</em>. Un ejemplo de una funci\xF3n impura ser\xEDa esta:</p><div class="language-js"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Una funci\xF3n impura - tiene un efecto secundario. No es lo ideal, pero es necesario para que la mayor\xEDa de los sistemas hagan algo \xFAtil.</p><p>Esta no es una funci\xF3n pura porque se basa en un recurso externo, en este caso, una API y una base de datos. Dependiendo de lo que haya en la base de datos cuando se llame, podr\xEDamos obtener un resultado diferente. Es impredecible.</p><p>\xBFC\xF3mo se relaciona esto con los accesorios? Piense en un componente que decida qu\xE9 representar en funci\xF3n de sus accesorios (no se preocupe por los datos, el c\xE1lculo o la configuraci\xF3n por ahora, pero se aplican las mismas ideas). Si piensa en un componente como una funci\xF3n y los accesorios como argumentos, se dar\xE1 cuenta de que, dados los mismos accesorios, el componente siempre representar\xE1 lo mismo. Su salida es determinista. Dado que usted decide qu\xE9 accesorios se pasan al componente, es f\xE1cil probarlo, ya que conocemos todos los estados posibles en los que puede estar el componente.</p><h2 id="los-fundamentos" tabindex="-1">Los fundamentos <a class="header-anchor" href="#los-fundamentos" aria-hidden="true">#</a></h2><p>Puede declarar accesorios de varias maneras. Trabajaremos con el componente <code>&lt;Message&gt;</code> para este ejemplo.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>variant<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// can be &#39;success&#39;, &#39;warning&#39;, &#39;error&#39;</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;variant&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Declarar un accesorio <code>variant</code> con la sintaxis de matriz inferior.</p><p>En este ejemplo, declaramos accesorios utilizando la sintaxis de matriz: <code>props: [&#39;variant&#39;]</code>. Es recomendable evitar la sintaxis de matriz. El uso de la sintaxis de objeto le da al lector m\xE1s informaci\xF3n sobre el tipo de valores que puede tomar la variante.</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Declarar un accesorio <code>variant</code> con la sintaxis de objeto superior.</p><p>Si est\xE1 utilizando TypeScript, a\xFAn mejor: cree un tipo:</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Variant</span> <span class="token operator">=</span> <span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;warning&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;error&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    variant<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> String <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Variant<span class="token punctuation">,</span>
      required<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Una variante fuertemente tipada usando TypeScript.</p><p>En nuestro ejemplo de <code>&lt;Message&gt;</code>, estamos trabajando con JavaScript normal, por lo que no podemos especificar cadenas espec\xEDficas para las variantes de accesorios como puede hacerlo en TypeScript. Sin embargo, hay algunos otros patrones que podemos usar.</p><p>Hemos especificado que se requiere el accesorio <code>variant</code> y nos gustar\xEDa aplicar un subconjunto espec\xEDfico de valores de cadena que puede recibir. Vue nos permite validar accesorios usando una clave de validaci\xF3n. Funciona as\xED:</p><div class="language-vue"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br></div><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>variant<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Message! {{ variant }}?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// if we return true, the prop is valid.</span>
        <span class="token comment">// if we return false, a runtime warning will be shown.</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Los validadores de accesorio son funciones. Si devuelven <code>false</code>, Vue mostrar\xE1 una advertencia en la consola.</p><p>\xA1Los validadores de accesorio son como la funci\xF3n de suma de la que hablamos anteriormente en el sentido de que son funciones puras! Eso significa que son f\xE1ciles de probar: dada la propiedad <code>X</code>, el validador deber\xEDa devolver el resultado <code>Y</code>.</p><p>Antes de agregar un validador, escribamos una prueba simple para el componente <code>&lt;Message&gt;</code>. Queremos probar entradas y salidas. En el caso de <code>&lt;Message&gt;</code>, el accesorio <code>variant</code> es la entrada y lo que se representa es la salida. Podemos escribir una prueba para afirmar que se aplica la clase correcta usando Testing Library y el atributo <code>classList</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@testing-library/vue&#39;</span>
<span class="token keyword">import</span> Message <span class="token keyword">from</span> <span class="token string">&#39;@/Message.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders variant correctly when passed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>Message<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>classList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>La prueba del accesorio se aplica a la clase.</p><p>Esto verifica que todo funcione como se esperaba cuando se pasa una propiedad de variante v\xE1lida a <code>&lt;Message&gt;</code>. \xBFQu\xE9 pasa cuando se pasa una variante no v\xE1lida? Queremos prohibir el uso del componente <code>&lt;Message&gt;</code> con una variante v\xE1lida. Este es un buen caso de uso para un validador.</p><h2 id="agregar-un-validador" tabindex="-1">Agregar un validador <a class="header-anchor" href="#agregar-un-validador" aria-hidden="true">#</a></h2><p>Actualicemos el accesorio <code>variant</code> para tener un validador simple:</p><div class="language-vue"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br></div><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>variant<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Message! {{ variant }}?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">variant</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>variant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">variant is required and must</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">be either &#39;success&#39;, &#39;warning&#39; or &#39;error&#39;.</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You passed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>variant<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Si <code>variant</code> no es v\xE1lido, lanzamos un error.</p><p>Ahora obtendremos un error si se pasa una propiedad no v\xE1lida. Una alternativa ser\xEDa simplemente devolver <code>false</code> en lugar de arrojar un error; esto solo le dar\xE1 una advertencia en la consola a trav\xE9s de <code>console.warn</code>. Los errores fuertes y claros cuando un componente no se usa correctamente quedan m\xE1s protegidos.</p><p>\xBFC\xF3mo probamos el validador? Si queremos cubrir todas las posibilidades, necesitamos 4 pruebas; uno para cada tipo de <code>variant</code> y otro para un tipo no v\xE1lido.</p><p>Es preferible probar los validadores de accesorios de forma aislada. Dado que los validadores son generalmente funciones puras, son f\xE1ciles de probar. Tambien hay otra raz\xF3n por la que se prueban los validadores de accesorios, el aislamiento, del que hablaremos despu\xE9s de escribir la prueba.</p><p>Para permitir probar el aislamiento del validador, necesitamos refactorizar <code>&lt;Message&gt;</code> un poco para separar el validador del componente:</p><div class="language-vue"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br></div><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>variant<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Message! {{ variant }}?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateVariant</span><span class="token punctuation">(</span><span class="token parameter">variant</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>variant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">variant is required and must</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">be either &#39;success&#39;, &#39;warning&#39; or &#39;error&#39;.</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You passed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>variant<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">validator</span><span class="token operator">:</span> validateVariant
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Exportando el validador por separado al componente.</p><p>Genial, <code>validarVariant</code> ahora se exporta por separado y es f\xE1cil de probar:</p><div class="language-js"><div class="highlight-lines"><br><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@testing-library/vue&#39;</span>
<span class="token keyword">import</span> Message<span class="token punctuation">,</span><span class="token punctuation">{</span> validateVariant <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/Message.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders variant correctly when passed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>Message<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">expect</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>classList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;validates valid variant prop&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">variant</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">validateVariant</span><span class="token punctuation">(</span>variant<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;throws error for invalid variant prop&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">validateVariant</span><span class="token punctuation">(</span><span class="token string">&#39;invalid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Probando todos los casos para el validador.</p><p>El simple hecho de hacer que <code>validateVariant</code> sea una funci\xF3n separada que se exporte puede parecer un cambio peque\xF1o, pero en realidad es una gran mejora. Al hacerlo, pudimos escribir pruebas para <code>validateVariant</code> con facilidad. Podemos estar seguros de que el componente <code>&lt;Message&gt;</code> solo se puede usar con un <code>variant</code> v\xE1lido. Si el desarrollador pasa una propiedad inv\xE1lida, recibe un mensaje claro y agradable en la consola::</p><div class="language-"><pre><code>Uncaught Error: variant is required and must be either &#39;success&#39;, &#39;warning&#39; or &#39;error&#39;.\` You passed: asdf 
</code></pre></div><p>\xA1Error! La variante aprobada no es v\xE1lida.</p><p>He aqu\xED el mismo ejemplo con Vue Test Utils:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> Message<span class="token punctuation">,</span><span class="token punctuation">{</span> validateVariant <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/Message.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;renders variant correctly when passed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Message<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">variant</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;validates valid variant prop&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">variant</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">validateVariant</span><span class="token punctuation">(</span>variant<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;throws error for invalid variant prop&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">validateVariant</span><span class="token punctuation">(</span><span class="token string">&#39;invalid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="concepto-clave-separacion-de-preocupaciones" tabindex="-1">Concepto Clave: Separaci\xF3n de Preocupaciones <a class="header-anchor" href="#concepto-clave-separacion-de-preocupaciones" aria-hidden="true">#</a></h2><p>Hemos escrito dos tipos diferentes de pruebas. La primera es una prueba de UI - en la que hacemos afirmaciones contra <code>classList</code>. El segundo es para el validador. Pone a prueba la l\xF3gica de negocios.</p><p>Para que esto quede m\xE1s claro, imagina que tu empresa se especializa en sistemas de dise\xF1o. Tienes algunos dise\xF1adores que probablemente usan Figma o Sketch para dise\xF1ar cosas como botones y mensajes.</p><p>Han decidido admitir tres variantes de mensajes: <em>success</em>, <em>warning</em> y <em>error</em>. Eres un desarrollador front-end. En este ejemplo, est\xE1 trabajando en la integraci\xF3n de Vue - escribir\xE1 componentes de Vue que aplican clases espec\xEDficas, que utilizan el CSS que proporcion\xF3 por los dise\xF1adores.</p><p>En el futuro, tambi\xE9n deber\xE1 crear componentes React y Angular utilizando el mismo CSS y las mismas pautas. Las tres integraciones podr\xEDan hacer uso de la funci\xF3n <code>validateVariant</code> y probar. Es la l\xF3gica de negocios central.</p><p>Esta distinci\xF3n es importante. Cuando usamos los m\xE9todos de <em>Testing Library</em> (como el <code>render</code>) y las API DOM (como <code>classList</code>), verificamos que la capa de la UI de Vue funcione correctamente. La prueba de <code>validateVariant</code> es para nuestra l\xF3gica de negocios. Estas diferencias a veces se denominan <em>preocupaciones</em>. Una pieza de c\xF3digo se refiere a la UI. El otro se ocupa de la l\xF3gica de negocios.</p><p>Separarlos es bueno. Hace que su c\xF3digo sea m\xE1s f\xE1cil de probar y mantener. Este concepto se conoce como <em>separaci\xF3n de preocupaciones</em>. Revisaremos esto a lo largo de este contenido.</p><p>Si desea saber si algo es parte de la UI o la l\xF3gica de negocios, preg\xFAntese esto: &quot;si cambiara a React, \xBFpodr\xEDa reutilizar este c\xF3digo y probarlo?&quot;.</p><p>En este caso, podr\xEDa reutilizar el validador y su prueba cuando escriba la integraci\xF3n de React. El validador se preocupa por la l\xF3gica de negocios y no sabe nada sobre el marco de la UI. Vue o React, solo admitiremos tres variantes de mensajes: <em>success</em>, <em>warning</em> y <em>error</em>. El componente y la prueba del componente (donde afirmamos usar <code>classes()</code>) tendr\xEDan que reescribirse usando un componente React y una biblioteca de pruebas React.</p><p>Idealmente, no desea que su l\xF3gica de negocios se acople a su marco de trabajo de elecci\xF3n; Los marcos van y vienen, pero es poco probable que los problemas que su negocio est\xE1 resolviendo cambien significativamente.</p><p>He visto que la separaci\xF3n deficiente de las preocupaciones le cuesta a las empresas decenas de miles de d\xF3lares; llegan a un punto en el que agregar nuevas funciones es arriesgado y lento, porque el problema principal de su negocio est\xE1 demasiado relacionado con la UI. Reescribir la UI significa reescribir la l\xF3gica de negocios.</p><h2 id="separacion-de-preocupaciones-caso-de-estudio" tabindex="-1">Separaci\xF3n de Preocupaciones - Caso de Estudio <a class="header-anchor" href="#separacion-de-preocupaciones-caso-de-estudio" aria-hidden="true">#</a></h2><p>Un ejemplo de separaci\xF3n deficiente de las preocupaciones que cuestan a una organizaci\xF3n fue una aplicaci\xF3n en la que trabaj\xE9 para un proveedor de componentes el\xE9ctricos. Ten\xEDan una aplicaci\xF3n que los clientes usar\xEDan para obtener una cotizaci\xF3n aproximada del precio de los componentes. El proceso de pedido era bastante complejo: ten\xEDa que pasar por un formulario con varios pasos y los valores del paso anterior afectar\xEDan los campos del paso siguiente.</p><p>La aplicaci\xF3n se escribi\xF3 usando jQuery (que no est\xE1 mal. Ning\xFAn marco es malo, solo si se usan incorrectamente). Toda la l\xF3gica de negocios se mezcl\xF3 con la l\xF3gica de la UI (esta es la parte mala). Ten\xEDan un modelo de descuento basado en la cantidad: &quot;Si compra m\xE1s de 50 resistencias, aplique un descuento X, de lo contrario Y&quot; - este tipo de cosas. Decidieron pasar a algo un poco m\xE1s moderno: la UI estaba muy anticuada y no era compatible con dispositivos m\xF3viles en absoluto. La complejidad del c\xF3digo jQuery era alta y el c\xF3digo era un desastre.</p><p>No solo tuve que volver a escribir toda la capa de la UI (que era para lo que me pagaron), sino que tambi\xE9n tuve que volver a escribir o extraer la gran mayor\xEDa de la l\xF3gica de negocios desde el c\xF3digo jQuery. Esta misi\xF3n de b\xFAsqueda y extracci\xF3n hizo que la tarea fuera mucho m\xE1s dif\xEDcil y arriesgada de lo que deber\xEDa haber sido: en lugar de solo actualizar la capa de la UI, tambi\xE9n tuve que sumergirme y aprender su modelo comercial y de precios (que termin\xF3 tomando mucho m\xE1s tiempo y cuesta mucho m\xE1s de lo que probablemente deber\xEDa).</p><p>Aqu\xED hay un ejemplo concreto usando el escenario del mundo real anterior. Digamos que una resistencia (un tipo de componente el\xE9ctrico) cuesta $0,60. Si compras m\xE1s de 50, obtienes un 20% de descuento. El c\xF3digo base de jQuery se parec\xEDa a esto:</p><div class="language-js"><pre><code><span class="token keyword">const</span> $resistorCount <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#resistors-count&#39;</span><span class="token punctuation">)</span>
$resistorCount<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> amount <span class="token operator">=</span> <span class="token function">parseInt</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token keyword">const</span> totalCost <span class="token operator">=</span> <span class="token number">0.6</span> <span class="token operator">*</span> amount
  <span class="token keyword">const</span> $price <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#price&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $price<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>totalCost <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    $price<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>totalCost<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Debe observar con mucho cuidado para descubrir d\xF3nde termina la UI y comienza el negocio. En este escenario, quer\xEDa cambiarme a Vue, la herramienta perfecta para una forma altamente din\xE1mica y reactiva. Tuve que profundizar en el c\xF3digo base y descubrir esta parte central de la l\xF3gica de negocios, extraerla y reescribirla con algunas pruebas (por supuesto, el c\xF3digo base anterior no ten\xEDa pruebas, como muchas bases de c\xF3digo de principios de la d\xE9cada de 2000). \xA1Este viaje de b\xFAsqueda, extracci\xF3n, aislamiento y reescritura est\xE1 lleno de riesgos y la posibilidad de cometer un error o perderse algo es muy alta! Lo que hubiera sido mucho mejor es si la l\xF3gica de negocios y la UI se hubieran separado:</p><div class="language-js"><pre><code><span class="token keyword">const</span> resistorPrice <span class="token operator">=</span> <span class="token number">0.6</span>
<span class="token keyword">function</span> <span class="token function">resistorCost</span><span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price <span class="token operator">*</span> amount <span class="token operator">*</span> <span class="token number">0.8</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price <span class="token operator">*</span> amount
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

$resistorCount<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> amount <span class="token operator">=</span> <span class="token function">parseInt</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">resistorCost</span><span class="token punctuation">(</span>resistorPrice<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>El segundo es muy superior. Puede ver d\xF3nde termina la l\xF3gica de negocios y comienza la UI: est\xE1n literalmente separados en dos funciones diferentes. La estrategia de precios es clara: un descuento por cualquier cantidad superior a 50. Tambi\xE9n es muy f\xE1cil probar la l\xF3gica de negocios de forma aislada. Si llega el d\xEDa en que decide que su marco de trabajo de elecci\xF3n ya no es apropiado, es trivial cambiar a otro marco: sus pruebas de unidad de l\xF3gica de negocios pueden permanecer sin cambios y sin tocar, y es de esperar que tambi\xE9n tenga algunas pruebas de navegador de extremo a extremo para mantenerlo a salvo.</p><p>Pasarse a Vue es trivial: tampoco es necesario tocar la l\xF3gica de negocios:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Price: {{ totalCost }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> resistorCost<span class="token punctuation">,</span> resistorPrice <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./logic.js&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">totalCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">resistorCost</span><span class="token punctuation">(</span>resistorPrice<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Comprender e identificar las diferentes preocupaciones en un sistema y estructurar correctamente las aplicaciones es la diferencia entre buenos ingenieros y grandes ingenieros.</p><h2 id="otro-ejemplo" tabindex="-1">Otro Ejemplo <a class="header-anchor" href="#otro-ejemplo" aria-hidden="true">#</a></h2><p>Suficiente filosof\xEDa de dise\xF1o por ahora. Veamos otro ejemplo relacionado con <code>props.</code> Este ejemplo usa el componente <code>&lt;Navbar&gt;</code>. Puede encontrarlo en <code>examples/props/navbar.vue</code>. Se parece a esto:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>authenticated<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Logout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!authenticated<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>El componente de la barra de navegaci\xF3n. Tiene un accesorio, autenticado. Es falso por defecto.</p><p>Antes incluso de ver la prueba, est\xE1 claro que necesitamos dos pruebas para cubrir todos los casos de uso. La raz\xF3n por la que esto queda claro de inmediato es que la propiedad <code>authenticated</code> es un <code>Boolean</code>, que solo tiene dos valores posibles.</p><p>La prueba no es especialmente interesante (\xA1pero la discusi\xF3n que sigue s\xED lo es!):</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@testing-library/vue&#39;</span>
<span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">&#39;@/Navbar.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Navbar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows logout when authenticated is true&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span>Navbar<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// getByText will throw an error if it cannot find the element.</span>
    screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">&#39;Logout&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows login by default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span>Navbar<span class="token punctuation">)</span>
    screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">&#39;Login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Probar el comportamiento de la barra de navegaci\xF3n para todos los valores de autenticados.</p><p>Lo \xFAnico que cambia seg\xFAn el valor de <code>authenticated</code> es el texto del bot\xF3n. Dado que el valor <code>default</code> es <code>false</code>, no necesitamos pasarlo como <code>props</code> en la segunda prueba.</p><p>Podemos refactorizar un poco con una funci\xF3n <code>renderNavbar</code>:</p><div class="language-js"><pre><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Navbar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">renderNavbar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span>Navbar<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      props
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows login authenticated is true&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">renderNavbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">&#39;Logout&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows logout by default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">renderNavbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">&#39;Login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Pruebas m\xE1s concisas.</p><p>Me gusta m\xE1s esta versi\xF3n de la prueba. Puede parecer un poco superficial para una prueba tan simple, pero a medida que sus componentes se vuelven m\xE1s complejos, tener una funci\xF3n para abstraer parte de la complejidad puede hacer que sus pruebas sean m\xE1s legibles.</p><p>Tambi\xE9n elimin\xE9 la nueva l\xEDnea entre la representaci\xF3n del componente y la afirmaci\xF3n. Por lo general, no dejo l\xEDneas nuevas en mis pruebas cuando son tan simples. Cuando se vuelven m\xE1s complejos, me gusta dejar algo de espacio, creo que lo hace m\xE1s legible. Este es solo mi enfoque personal. Lo importante no es tu estilo de c\xF3digo, sino que est\xE1s escribiendo pruebas.</p><p>Aunque t\xE9cnicamente hemos cubierto todos los casos, me gustar\xEDa agregar el tercer caso: donde <code>authenticated</code> se establece expl\xEDcitamente en <code>false</code>.</p><div class="language-js"><pre><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Navbar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">renderNavbar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span>Navbar<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      props
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows login authenticated is true&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows logout by default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows login when authenticated is false&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">renderNavbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">&#39;Login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Agregar una tercera prueba para ser expl\xEDcito.</p><p>Esto, por supuesto, pasa. Me gusta mucho la simetr\xEDa que exhiben las tres pruebas, mostrando los tres casos de una manera tan concisa.</p><p>Repasemos la idea de la separaci\xF3n de preocupaciones; \xBFEs esta una prueba de UI o una prueba de l\xF3gica de negocios? Si movi\xE9ramos el marco, \xBFpodr\xEDamos reutilizar esta prueba?</p><p>La respuesta es no: necesitar\xEDamos escribir una nueva prueba (para trabajar con React y su integraci\xF3n con la biblioteca de pruebas). Esto est\xE1 bien, solo significa que esta parte de nuestro c\xF3digo base es parte de la capa de la UI, no nuestra l\xF3gica de negocios central. Nada que extraer.</p><h2 id="la-verdadera-prueba-\xBFse-refactoriza" tabindex="-1">La verdadera prueba: \xBFSe refactoriza? <a class="header-anchor" href="#la-verdadera-prueba-\xBFse-refactoriza" aria-hidden="true">#</a></h2><p>Podemos hacer una peque\xF1a verificaci\xF3n de cordura y asegurarnos de que nuestras pruebas no est\xE9n probando detalles de implementaci\xF3n. Los detalles de implementaci\xF3n se refieren a <em>c\xF3mo</em> funciona algo. Al realizar pruebas, no nos importan los detalles de c\xF3mo funciona algo. En cambio, nos preocupamos por lo <em>qu\xE9</em> hace y si lo hace correctamente. Recuerde, debemos probar que obtenemos el resultado esperado en funci\xF3n de las entradas dadas. En este caso, queremos probar que el texto correcto se represente en funci\xF3n de los datos, sin preocuparnos demasiado por c\xF3mo se implementa realmente la l\xF3gica.</p><p>Podemos validar esto refactorizando el componente <code>&lt;Navbar&gt;</code>. Mientras las pruebas contin\xFAen, podemos estar seguros de que son resistentes a los refactores y est\xE1n probando comportamientos, no detalles de implementaci\xF3n.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>
    {{ \`\${authenticated ? &#39;Logout&#39; : &#39;Login&#39;}\` }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Refactorizando <code>Navbar</code>. \xA1El comportamiento sigue siendo el mismo!</p><p>\xA1Todo todav\xEDa pasa! Nuestras pruebas est\xE1n haciendo lo que se supone que deben hacer. \xBFO son? \xBFQu\xE9 pasa si decidimos que nos gustar\xEDa usar una etiqueta <code>&lt;a&gt;</code> en lugar de un <code>&lt;button&gt;</code>?</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span>
    {{ \`\${authenticated ? &#39;Logout&#39; : &#39;Login&#39;}\` }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Usar una etiqueta de anclaje en lugar de un bot\xF3n.</p><p>Obviamente, en un sistema real se requerir\xEDa una propiedad <code>href</code> y cambiar\xEDa dependiendo de <code>authenticated</code>, pero eso no es en lo que nos estamos enfocando aqu\xED. Todav\xEDa pasa. \xA1Una gran noticia! Nuestras pruebas sobrevivieron a dos refactorizaciones; esto significa que estamos probando el comportamiento, no los detalles de implementaci\xF3n, lo cual es bueno.</p><p>He aqu\xED el mismo ejemplo con Vue Test Utils:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">&#39;@/Navbar.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Navbar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">navbarFactory</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">mount</span><span class="token punctuation">(</span>Navbar<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      props
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows login authenticated is true&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">navbarFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Logout&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows logout by default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">navbarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;shows login when authenticated is false&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">navbarFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">authenticated</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><p>Este cap\xEDtulo discuti\xF3 algunas t\xE9cnicas para probar propiedades. Tambi\xE9n vimos c\xF3mo usar el m\xE9todo <code>render</code> de Testing Library para probar componentes. Hablamos del concepto de <em>separaci\xF3n de preocupaciones</em> y de c\xF3mo puede hacer que su l\xF3gica de negocios sea m\xE1s comprobable y sus aplicaciones m\xE1s f\xE1ciles de mantener. Finalmente, vimos c\xF3mo las pruebas pueden permitirnos refactorizar el c\xF3digo con confianza.</p>`,104),o=[e];function c(l,u,i,r,k,d){return s(),a("div",null,o)}var v=n(p,[["render",c]]);export{m as __pageData,v as default};
