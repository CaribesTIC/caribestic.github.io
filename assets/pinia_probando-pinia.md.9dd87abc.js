import{_ as n,c as a,o as s,a as t}from"./app.af2b6828.js";const f='{"title":"Probando Pinia","description":"","frontmatter":{},"headers":[{"level":2,"title":"Pruebas de Tiendas","slug":"pruebas-de-tiendas"},{"level":2,"title":"Unidad de prueba de una tienda","slug":"unidad-de-prueba-de-una-tienda"},{"level":2,"title":"Componentes de pruebas unitarias","slug":"componentes-de-pruebas-unitarias"},{"level":2,"title":"Estado inicial","slug":"estado-inicial"},{"level":2,"title":"Personalizaci\xF3n del comportamiento de las acciones","slug":"personalizacion-del-comportamiento-de-las-acciones"},{"level":2,"title":"Especificaci\xF3n de la funci\xF3n createSpy","slug":"especificacion-de-la-funcion-createspy"},{"level":2,"title":"Simulando captadores","slug":"simulando-captadores"},{"level":2,"title":"Complementos de Pinia","slug":"complementos-de-pinia"},{"level":2,"title":"Pruebas E2E","slug":"pruebas-e2e"},{"level":2,"title":"Componentes de prueba unitaria (Vue 2)","slug":"componentes-de-prueba-unitaria-vue-2"}],"relativePath":"pinia/probando-pinia.md"}',e={},p=t(`<h1 id="probando-pinia" tabindex="-1">Probando Pinia <a class="header-anchor" href="#probando-pinia" aria-hidden="true">#</a></h1><h2 id="pruebas-de-tiendas" tabindex="-1">Pruebas de Tiendas <a class="header-anchor" href="#pruebas-de-tiendas" aria-hidden="true">#</a></h2><p>Las tiendas, por dise\xF1o, se utilizar\xE1n en muchos lugares y pueden hacer que las pruebas sean mucho m\xE1s dif\xEDciles de lo que deber\xEDan ser. Afortunadamente, esto no tiene por qu\xE9 ser as\xED. Debemos tener en cuenta tres cosas al probar las tiendas:</p><ul><li>La instancia <code>pinia</code>: las tiendas no pueden funcionar sin ella</li><li><code>actions</code>: la mayor\xEDa de las veces contienen la l\xF3gica m\xE1s compleja de nuestras tiendas. \xBFNo ser\xEDa bueno si ellas fueran simuladas por defecto?</li><li>Complementos: si conf\xEDa en los complementos, tambi\xE9n deber\xE1 instalarlos para las pruebas</li></ul><p>Dependiendo de qu\xE9 o c\xF3mo est\xE9 probando, debemos ocuparnos de estos tres de manera diferente:</p><ul><li><a href="./probando-pinia.html#pruebas-de-tiendas">Pruebas de Tiendas</a><ul><li><a href="./probando-pinia.html#unidad-de-prueba-de-una-tienda">Unidad de prueba de una tienda</a></li><li><a href="./probando-pinia.html#componentes-de-pruebas-unitarias">Componentes de pruebas unitarias</a><ul><li><a href="./probando-pinia.html#estado-inicial">Estado inicial</a></li><li><a href="./probando-pinia.html#personalizacion-del-comportamiento-de-las-acciones">Personalizaci\xF3n del comportamiento de las acciones</a>.</li><li><a href="./probando-pinia.html#especificacion-de-la-funcion-createspy">Especificaci\xF3n de la funci\xF3n createSpy</a></li><li><a href="./probando-pinia.html#simulando-captadores">Simulando captadores</a></li><li><a href="./probando-pinia.html#complementos-de-pinia">Complementos de Pinia</a></li></ul></li><li><a href="./probando-pinia.html#pruebas-e2e">Pruebas E2E</a></li><li><a href="./probando-pinia.html#componentes-de-prueba-unitaria-vue-2">Componentes de prueba unitaria (Vue 2)</a></li></ul></li></ul><h2 id="unidad-de-prueba-de-una-tienda" tabindex="-1">Unidad de prueba de una tienda <a class="header-anchor" href="#unidad-de-prueba-de-una-tienda" aria-hidden="true">#</a></h2><p>Para realizar una prueba unitaria de una tienda, la parte m\xE1s importante es crear una instancia de <code>pinia</code>:</p><div class="language-js"><pre><code><span class="token comment">// counterStore.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setActivePinia<span class="token punctuation">,</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/counter&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Counter Store&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// creates a fresh pinia and make it active so it&#39;s automatically picked</span>
    <span class="token comment">// up by any useStore() call without having to pass it to it:</span>
    <span class="token comment">// \`useStore(pinia)\`</span>
    <span class="token function">setActivePinia</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;increments&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;increments by amount&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Si tiene complementos de la tienda, hay una cosa importante que debe saber: los complementos no se utilizar\xE1n hasta que <code>pinia</code> est\xE9 instalado en una aplicaci\xF3n. Esto se puede solucionar creando una aplicaci\xF3n vac\xEDa o una falsa:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setActivePinia<span class="token punctuation">,</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> somePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/plugin&#39;</span>

<span class="token comment">// same code as above...</span>

<span class="token comment">// you don&#39;t need to create one app per test</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>somePlugin<span class="token punctuation">)</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
  <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="componentes-de-pruebas-unitarias" tabindex="-1">Componentes de pruebas unitarias <a class="header-anchor" href="#componentes-de-pruebas-unitarias" aria-hidden="true">#</a></h2><p>Esto se puede lograr con <code>createTestingPinia()</code>, que devuelve una instancia de <code>pinia</code> dise\xF1ada para ayudar a los componentes de pruebas unitarias.</p><p>Comience instalando <code>@pinia/testing</code>:</p><div class="language-"><pre><code>npm i -D @pinia/testing
</code></pre></div><p>Y aseg\xFArese de crear una pruea de <code>pinia</code> en sus pruebas al montar un componente:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createTestingPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@pinia/testing&#39;</span>

<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// uses the testing pinia!</span>

<span class="token comment">// state can be directly manipulated</span>
store<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;my new name&#39;</span>
<span class="token comment">// can also be done through patch</span>
store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;new name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;new name&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// actions are stubbed by default, meaning they don&#39;t execute their code by default.</span>
<span class="token comment">// See below to customize this behavior.</span>
store<span class="token punctuation">.</span><span class="token function">someAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>someAction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>someAction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Tenga en cuenta que si est\xE1 utilizando Vue 2, <code>@vue/test-utils</code> requiere una <a href="./probando-pinia.html#componentes-de-prueba-unitaria-vue-2">configuraci\xF3n ligeramente diferente</a>.</p><h2 id="estado-inicial" tabindex="-1">Estado inicial <a class="header-anchor" href="#estado-inicial" aria-hidden="true">#</a></h2><p>Puede establecer el estado inicial de todas sus tiendas al crear un pinia de prueba pasando un objeto <code>initialState</code>. Este objeto ser\xE1 utilizado por el <code>pinia</code> de prueba para parchear (<code>patch</code>) las tiendas cuando se creen. Digamos que desea inicializar el estado de esta tienda:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Dado que la tienda se llama <em>&quot;counter&quot;</em>, debe agregar un objeto coincidente a <code>initialState</code>:</p><div class="language-js"><pre><code><span class="token comment">// somewhere in your test</span>
<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">initialState</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// start the counter at 20 instead of 0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// uses the testing pinia!</span>
store<span class="token punctuation">.</span>n <span class="token comment">// 20</span>
</code></pre></div><h2 id="personalizacion-del-comportamiento-de-las-acciones" tabindex="-1">Personalizaci\xF3n del comportamiento de las acciones <a class="header-anchor" href="#personalizacion-del-comportamiento-de-las-acciones" aria-hidden="true">#</a></h2><p><code>createTestingPinia</code> excluye todas las acciones de la tienda a menos que se indique lo contrario. Esto le permite probar sus componentes y tiendas por separado.</p><p>Si desea revertir este comportamiento y normalmente ejecutar sus acciones durante las pruebas, especifique <code>stubActions: false</code> cuando llame a <code>createTestingPinia</code>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">stubActions</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Now this call WILL execute the implementation defined by the store</span>
store<span class="token punctuation">.</span><span class="token function">someAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// ...but it&#39;s still wrapped with a spy, so you can inspect calls</span>
<span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>someAction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="especificacion-de-la-funcion-createspy" tabindex="-1">Especificaci\xF3n de la funci\xF3n createSpy <a class="header-anchor" href="#especificacion-de-la-funcion-createspy" aria-hidden="true">#</a></h2><p>Al usar Jest o Vitest con <code>globals: true</code>, <code>createTestingPinia</code> autom\xE1ticamente agrega acciones utilizando la funci\xF3n de espionaje basada en el marco de prueba existente (<code>jest.fn</code> o <code>vitest.fn</code>). Si est\xE1 utilizando un marco diferente, deber\xE1 proporcionar una opci\xF3n <a href="https://pinia.vuejs.org/api/interfaces/pinia_testing.TestingOptions.html#createspy" target="_blank" rel="noopener noreferrer">createSpy</a>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> sinon <span class="token keyword">from</span> <span class="token string">&#39;sinon&#39;</span>

<span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">createSpy</span><span class="token operator">:</span> sinon<span class="token punctuation">.</span>spy<span class="token punctuation">,</span> <span class="token comment">// use sinon&#39;s spy to wrap actions</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Puede encontrar m\xE1s ejemplos en <a href="https://github.com/vuejs/pinia/blob/v2/packages/testing/src/testing.spec.ts" target="_blank" rel="noopener noreferrer">las pruebas del paquete de pruebas</a>.</p><h2 id="simulando-captadores" tabindex="-1">Simulando captadores <a class="header-anchor" href="#simulando-captadores" aria-hidden="true">#</a></h2><p>De forma predeterminada, cualquier <em>getter</em> se calcular\xE1 como un uso normal, pero puede forzar manualmente un valor configurando el <em>getter</em> en lo que desee:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createTestingPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@pinia/testing&#39;</span>

<span class="token keyword">const</span> useCounter <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">double</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>

counter<span class="token punctuation">.</span>double <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// \u{1FA84} getters are writable only in tests</span>

<span class="token comment">// set to undefined to reset the default behavior</span>
<span class="token comment">// @ts-expect-error: usually it&#39;s a number</span>
counter<span class="token punctuation">.</span>double <span class="token operator">=</span> <span class="token keyword">undefined</span>
counter<span class="token punctuation">.</span>double <span class="token comment">// 2 (=1 x 2)</span>
</code></pre></div><h2 id="complementos-de-pinia" tabindex="-1">Complementos de Pinia <a class="header-anchor" href="#complementos-de-pinia" aria-hidden="true">#</a></h2><p>Si tiene complementos <code>pinia</code>, aseg\xFArese de pasarlos cuando llame a <code>createTestingPinia()</code> para que se apliquen correctamente. No los agregue con <code>testingPinia.use(MyPlugin)</code> como lo har\xEDa con un <code>pinia</code> normal:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createTestingPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@pinia/testing&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> somePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/plugin&#39;</span>

<span class="token comment">// inside some test</span>
<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">stubActions</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>somePlugin<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="pruebas-e2e" tabindex="-1">Pruebas E2E <a class="header-anchor" href="#pruebas-e2e" aria-hidden="true">#</a></h2><p>Cuando se trata de <code>pinia</code>, no necesita cambiar nada para las pruebas e2e, \xA1ese es el objetivo de las pruebas e2e! Tal vez podr\xEDa probar las solicitudes HTTP, pero eso est\xE1 m\xE1s all\xE1 del alcance de esta gu\xEDa \u{1F604}.</p><h2 id="componentes-de-prueba-unitaria-vue-2" tabindex="-1">Componentes de prueba unitaria (Vue 2) <a class="header-anchor" href="#componentes-de-prueba-unitaria-vue-2" aria-hidden="true">#</a></h2><p>Cuando utilice <a href="https://v1.test-utils.vuejs.org/" target="_blank" rel="noopener noreferrer">Vue Test Utils 1</a>, instale Pinia en un <code>localVue</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PiniaVuePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createLocalVue<span class="token punctuation">,</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createTestingPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@pinia/testing&#39;</span>

<span class="token keyword">const</span> localVue <span class="token operator">=</span> <span class="token function">createLocalVue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
localVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>PiniaVuePlugin<span class="token punctuation">)</span>

<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  localVue<span class="token punctuation">,</span>
  <span class="token literal-property property">pinia</span><span class="token operator">:</span> <span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// uses the testing pinia!</span>
</code></pre></div>`,42),o=[p];function c(i,u,l,r,k,d){return s(),a("div",null,o)}var b=n(e,[["render",c]]);export{f as __pageData,b as default};
