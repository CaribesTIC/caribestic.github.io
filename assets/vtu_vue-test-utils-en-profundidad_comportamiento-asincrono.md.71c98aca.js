import{_ as n,c as s,o as a,a as t}from"./app.9b0c39a4.js";const g='{"title":"Comportamiento As\xEDncrono","description":"","frontmatter":{},"headers":[{"level":2,"title":"Un Ejemplo Simple: Actualizaci\xF3n con trigger","slug":"un-ejemplo-simple-actualizacion-con-trigger"},{"level":2,"title":"Resoluci\xF3n de Otros Comportamientos As\xEDncronos","slug":"resolucion-de-otros-comportamientos-asincronos"},{"level":2,"title":"Prueba de setup as\xEDncrono","slug":"prueba-de-setup-asincrono"},{"level":2,"title":"Conclusi\xF3n","slug":"conclusion"}],"relativePath":"vtu/vue-test-utils-en-profundidad/comportamiento-asincrono.md"}',o={},e=t(`<h1 id="comportamiento-asincrono" tabindex="-1">Comportamiento As\xEDncrono <a class="header-anchor" href="#comportamiento-asincrono" aria-hidden="true">#</a></h1><p>You may have noticed some other parts of the guide using await when calling some methods on wrapper, such as trigger and setValue. What&#39;s that all about?</p><p>Es posible que haya notado que otras partes de la gu\xEDa usan <code>await</code> al llamar a algunos m\xE9todos en el <code>wrapper</code>, como <code>trigger</code> y <code>setValue</code>. \xBFDe qu\xE9 trata todo eso?</p><p>Es posible que sepa que Vue se actualiza de forma reactiva: cuando cambia un valor, el DOM se actualiza autom\xE1ticamente para reflejar el valor m\xE1s reciente. <a href="https://vuejs.org/#async-update-queue" target="_blank" rel="noopener noreferrer">Vue realiza estas actualizaciones de forma as\xEDncrona</a>. Por el contrario, un corredor de prueba como Vitest se ejecuta sincr\xF3nicamente. Esto puede causar algunos resultados sorprendentes en las pruebas.</p><p>Veamos algunas estrategias para garantizar que Vue actualice el DOM como se esperaba cuando ejecutemos nuestras pruebas.</p><h2 id="un-ejemplo-simple-actualizacion-con-trigger" tabindex="-1">Un Ejemplo Simple: Actualizaci\xF3n con <code>trigger</code> <a class="header-anchor" href="#un-ejemplo-simple-actualizacion-con-trigger" aria-hidden="true">#</a></h2><p>Reutilicemos el componente <code>&lt;Counter&gt;</code> del <a href="./../esencial/manejo-de-eventos.html">manejo de eventos</a> con un cambio; ahora renderizamos el <code>count</code> en el <code>template</code>.</p><div class="language-js"><pre><code><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;p&gt;Count: {{ count }}&lt;/p&gt;
    &lt;button @click=&quot;handleClick&quot;&gt;Increment&lt;/button&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Escribamos una prueba para verificar que el <code>count</code> est\xE1 aumentando:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;increments by 1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Count: 1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\xA1Sorprendentemente, esto falla! La raz\xF3n es que, aunque el <code>count</code> aumenta, Vue no actualizar\xE1 el DOM hasta el siguiente ciclo de eventos. Por esta raz\xF3n, se llamar\xE1 a la afirmaci\xF3n (<code>expect()...</code>) antes de que Vue actualice el DOM.</p><div class="tip custom-block"><p class="custom-block-title">CONSEJO</p><p>Si desea obtener m\xE1s informaci\xF3n sobre este comportamiento b\xE1sico de JavaScript, lea sobre <a href="https://javascript.info/event-loop#macrotasks-and-microtasks" target="_blank" rel="noopener noreferrer">Event Loop y sus macrotareas y microtareas</a>.</p></div><p>Dejando a un lado los detalles de implementaci\xF3n, \xBFc\xF3mo podemos solucionar esto? Vue en realidad nos proporciona una forma de esperar hasta que se actualice el DOM: <code>nextTick</code>.</p><div class="language-js"><div class="highlight-lines"><br><div class="highlighted">\xA0</div><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;increments by 1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>

  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Count: 1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Ahora la prueba pasar\xE1 porque nos aseguramos de que se haya ejecutado el siguiente &quot;tick&quot; y que el DOM se haya actualizado antes de que se ejecute la afirmaci\xF3n.</p><p>Dado que <code>await nextTick()</code> es com\xFAn, Vue Test Utils proporciona un atajo. Los m\xE9todos que hacen que el DOM se actualice, como <code>trigger</code> y <code>setValue</code>, devuelven <code>nextTick</code>, por lo que puede esperarlos usando <code>await</code> directamente:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;increments by 1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>

  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Count: 1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="resolucion-de-otros-comportamientos-asincronos" tabindex="-1">Resoluci\xF3n de Otros Comportamientos As\xEDncronos <a class="header-anchor" href="#resolucion-de-otros-comportamientos-asincronos" aria-hidden="true">#</a></h2><p><code>nextTick</code> es \xFAtil para garantizar que alg\xFAn cambio en los datos reactivos se refleje en el DOM antes de continuar con la prueba. Sin embargo, a veces es posible que desee asegurarse de que tambi\xE9n se completen otros comportamientos as\xEDncronos no relacionados con Vue.</p><p>Un ejemplo com\xFAn es una funci\xF3n que devuelve una <code>Promise</code>. Tal vez te burlaste de tu cliente HTTP <code>axios</code> usando <code>vi.fn()</code>:</p><div class="language-js"><pre><code>axios<span class="token punctuation">.</span>get <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;some mocked data!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>En este caso, Vue no tiene conocimiento de la Promesa no resuelta, por lo que llamar a <code>nextTick</code> no funcionar\xE1; su afirmaci\xF3n puede ejecutarse antes de que se resuelva. Para escenarios como este, Vue Test Utils expone <code>flushPromises</code>, lo que hace que todas las promesas pendientes se resuelvan de inmediato.</p><p>Veamos un ejemplo:</p><div class="language-js"><div class="highlight-lines"><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> flushPromises <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>

<span class="token keyword">const</span> AxiosComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;{{ data }}&lt;/div&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/data.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

axios<span class="token punctuation">.</span>get <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;some mocked data!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;uses a mocked axios HTTP client and flushPromises&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// some component that makes a HTTP called in \`mounted\` using \`axios\`</span>
  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>AxiosComponent<span class="token punctuation">)</span>

  <span class="token keyword">await</span> <span class="token function">flushPromises</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// axios promise is resolved immediately</span>
  
  <span class="token comment">// after the line above, axios request has resolved with the mocked data.    </span>
  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;some mocked data!&#39;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">CONSEJO</p><p>Si desea obtener m\xE1s informaci\xF3n sobre c\xF3mo probar solicitudes en componentes, aseg\xFArese de consultar la gu\xEDa <a href="./../vue-test-utils-en-profundidad/solicitudes-http.html">Realizando Solicitudes HTTP</a>.</p></div><h2 id="prueba-de-setup-asincrono" tabindex="-1">Prueba de <code>setup</code> as\xEDncrono <a class="header-anchor" href="#prueba-de-setup-asincrono" aria-hidden="true">#</a></h2><p>Si el componente que desea probar utiliza un <code>setup</code> as\xEDncrono, debe montar el componente dentro de un componente <code>Suspense</code> (como lo hace cuando lo usa en su aplicaci\xF3n).</p><p>Por ejemplo, este componente <code>Async</code>:</p><div class="language-js"><div class="highlight-lines"><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">const</span> Async <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;{{ data }}&lt;/div&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// await something</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/data.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      data
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>debe probarse de la siguiente manera:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> flushPromises <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>

axios<span class="token punctuation">.</span>get <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;some mocked data!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;Async component&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> TestComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> Async <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;Suspense&gt;&lt;Async/&gt;&lt;/Suspense&gt;&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>TestComponent<span class="token punctuation">)</span> <span class="token comment">// ...</span>
    
  <span class="token keyword">await</span> <span class="token function">flushPromises</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;some mocked data!&#39;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="conclusion" tabindex="-1">Conclusi\xF3n <a class="header-anchor" href="#conclusion" aria-hidden="true">#</a></h2><ul><li>Vue actualiza el DOM de forma as\xEDncrona; En su lugar, el corredor de pruebas ejecuta el c\xF3digo de forma s\xEDncrona.</li><li>Use <code>await nextTick()</code> para asegurarse de que el DOM se haya actualizado antes de que contin\xFAe la prueba.</li><li>Las funciones que podr\xEDan actualizar el DOM (como <code>trigger</code> y <code>setValue</code>) devuelven <code>nextTick</code>, por lo que debe esperarlos con <code>await</code>.</li><li>Use <code>flushPromises</code> de Vue Test Utils para resolver cualquier promesa no resuelta de dependencias que no sean de Vue (como solicitudes de API).</li><li>Utilice <code>Suspense</code> para probar componentes con un <code>setup</code> as\xEDncrono.</li></ul>`,33),p=[e];function c(u,l,i,r,k,d){return a(),s("div",null,p)}var h=n(o,[["render",c]]);export{g as __pageData,h as default};
